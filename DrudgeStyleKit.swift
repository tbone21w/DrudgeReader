//
//  DrudgeStyleKit.swift
//  Drudge
//
//  Created by Todd Isaacs on 6/1/16.
//  Copyright (c) 2016 Nerd Waller. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DrudgeStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let logoBaseColor: UIColor = UIColor(red: 0.069, green: 0.265, blue: 0.877, alpha: 1.000)
        static let logoBackgroundTop: UIColor = DrudgeStyleKit.logoBaseColor.colorWithHighlight(0.8)
        static let logoFill: UIColor = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.6)
        static let logoLines: UIColor = DrudgeStyleKit.logoBaseColor.colorWithSaturation(0.3)
        static let logoBackGroundBottom: UIColor = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.5)
        static let logoStroke: UIColor = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.2)
        static let logoBaseSemiTransparent: UIColor = DrudgeStyleKit.logoBaseColor.colorWithAlpha(0.2)
        static let unreadArticle: UIColor = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.7)
        static let readArticle: UIColor = DrudgeStyleKit.unreadArticle.colorWithAlpha(0.4)
        static var imageOfLogoLaunchIcon: UIImage?
        static var logoLaunchIconTargets: [AnyObject]?
        static var imageOfLogoIcon: UIImage?
        static var logoIconTargets: [AnyObject]?
        static var imageOfRefresh: UIImage?
        static var refreshTargets: [AnyObject]?
        static var imageOfPicture: UIImage?
        static var pictureTargets: [AnyObject]?
        static var imageOfFilter: UIImage?
        static var filterTargets: [AnyObject]?
        static var imageOfNoFilter: UIImage?
        static var noFilterTargets: [AnyObject]?
        static var imageOfMiniLogo: UIImage?
        static var miniLogoTargets: [AnyObject]?
        static var imageOfMiniLogo2: UIImage?
        static var miniLogo2Targets: [AnyObject]?
    }

    //// Colors

    public class var logoBaseColor: UIColor { return Cache.logoBaseColor }
    public class var logoBackgroundTop: UIColor { return Cache.logoBackgroundTop }
    public class var logoFill: UIColor { return Cache.logoFill }
    public class var logoLines: UIColor { return Cache.logoLines }
    public class var logoBackGroundBottom: UIColor { return Cache.logoBackGroundBottom }
    public class var logoStroke: UIColor { return Cache.logoStroke }
    public class var logoBaseSemiTransparent: UIColor { return Cache.logoBaseSemiTransparent }
    public class var unreadArticle: UIColor { return Cache.unreadArticle }
    public class var readArticle: UIColor { return Cache.readArticle }

    //// Drawing Methods

    public class func drawLogoLaunchIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [DrudgeStyleKit.logoBackGroundBottom.CGColor, DrudgeStyleKit.logoBackgroundTop.CGColor], [0, 1])!

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 6.5, y: 6.5, width: 186, height: 186))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPoint(x: 99.5, y: 6.5), CGPoint(x: 99.5, y: 192.5), CGGradientDrawingOptions())
        CGContextRestoreGState(context)
        DrudgeStyleKit.logoStroke.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 119.25, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 96.18))
        bezierPath.addLineToPoint(CGPoint(x: 114.65, y: 96.18))
        bezierPath.addCurveToPoint(CGPoint(x: 143.1, y: 78.77), controlPoint1: CGPoint(x: 133.62, y: 96.18), controlPoint2: CGPoint(x: 143.1, y: 90.37))
        bezierPath.addCurveToPoint(CGPoint(x: 119.25, y: 65.95), controlPoint1: CGPoint(x: 143.1, y: 70.22), controlPoint2: CGPoint(x: 135.15, y: 65.95))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 88.72, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 76.74, y: 65.95))
        bezierPath.addCurveToPoint(CGPoint(x: 54.43, y: 67.83), controlPoint1: CGPoint(x: 66.81, y: 65.95), controlPoint2: CGPoint(x: 59.37, y: 66.58))
        bezierPath.addCurveToPoint(CGPoint(x: 41.68, y: 74.79), controlPoint1: CGPoint(x: 49.49, y: 69.08), controlPoint2: CGPoint(x: 45.24, y: 71.4))
        bezierPath.addCurveToPoint(CGPoint(x: 32.88, y: 97.74), controlPoint1: CGPoint(x: 35.82, y: 80.35), controlPoint2: CGPoint(x: 32.88, y: 88))
        bezierPath.addCurveToPoint(CGPoint(x: 41.82, y: 122.54), controlPoint1: CGPoint(x: 32.88, y: 108.12), controlPoint2: CGPoint(x: 35.86, y: 116.38))
        bezierPath.addCurveToPoint(CGPoint(x: 70.09, y: 131.21), controlPoint1: CGPoint(x: 47.36, y: 128.32), controlPoint2: CGPoint(x: 56.79, y: 131.21))
        bezierPath.addLineToPoint(CGPoint(x: 88.72, y: 131.21))
        bezierPath.addLineToPoint(CGPoint(x: 88.72, y: 65.95))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 150.46, y: 62.43))
        bezierPath.addCurveToPoint(CGPoint(x: 158.62, y: 77.71), controlPoint1: CGPoint(x: 155.9, y: 65.93), controlPoint2: CGPoint(x: 158.62, y: 71.03))
        bezierPath.addCurveToPoint(CGPoint(x: 137.14, y: 101.21), controlPoint1: CGPoint(x: 158.62, y: 88.75), controlPoint2: CGPoint(x: 151.46, y: 96.59))
        bezierPath.addLineToPoint(CGPoint(x: 172.63, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 154.09, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 123.85, y: 104.96))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 104.96))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 68.98, y: 140))
        bezierPath.addCurveToPoint(CGPoint(x: 30.94, y: 128.64), controlPoint1: CGPoint(x: 52.63, y: 140), controlPoint2: CGPoint(x: 39.95, y: 136.21))
        bezierPath.addCurveToPoint(CGPoint(x: 17.44, y: 96.62), controlPoint1: CGPoint(x: 21.94, y: 121.06), controlPoint2: CGPoint(x: 17.44, y: 110.39))
        bezierPath.addCurveToPoint(CGPoint(x: 28.31, y: 69.2), controlPoint1: CGPoint(x: 17.44, y: 85.28), controlPoint2: CGPoint(x: 21.06, y: 76.14))
        bezierPath.addCurveToPoint(CGPoint(x: 44.56, y: 59.91), controlPoint1: CGPoint(x: 32.88, y: 64.83), controlPoint2: CGPoint(x: 38.3, y: 61.73))
        bezierPath.addCurveToPoint(CGPoint(x: 69.19, y: 57.16), controlPoint1: CGPoint(x: 50.82, y: 58.08), controlPoint2: CGPoint(x: 59.03, y: 57.16))
        bezierPath.addLineToPoint(CGPoint(x: 127.01, y: 57.16))
        bezierPath.addCurveToPoint(CGPoint(x: 150.46, y: 62.43), controlPoint1: CGPoint(x: 137.21, y: 57.16), controlPoint2: CGPoint(x: 145.03, y: 58.92))
        bezierPath.closePath()
        DrudgeStyleKit.logoFill.setFill()
        bezierPath.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 50, y: 76))
        bezier2Path.addLineToPoint(CGPoint(x: 80.5, y: 76.5))
        DrudgeStyleKit.logoLines.setFill()
        bezier2Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 43, y: 83))
        bezier3Path.addLineToPoint(CGPoint(x: 80.5, y: 83.5))
        DrudgeStyleKit.logoLines.setFill()
        bezier3Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 41, y: 90))
        bezier4Path.addLineToPoint(CGPoint(x: 80.5, y: 90.5))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier4Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 39, y: 97))
        bezier5Path.addLineToPoint(CGPoint(x: 80.5, y: 97.5))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier5Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 40, y: 105))
        bezier6Path.addLineToPoint(CGPoint(x: 80.5, y: 105.5))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier6Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: 43, y: 111.5))
        bezier7Path.addLineToPoint(CGPoint(x: 80.5, y: 112))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier7Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPoint(x: 47.5, y: 119))
        bezier8Path.addLineToPoint(CGPoint(x: 80.5, y: 119))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier8Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.stroke()
    }

    public class func drawLogoIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [DrudgeStyleKit.logoBackGroundBottom.CGColor, DrudgeStyleKit.logoBackgroundTop.CGColor], [0, 1])!

        //// Group
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 0.5, 0.5)
        CGContextScaleCTM(context, 0.75, 0.75)



        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.2, 0.2)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 186, height: 186))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPoint(x: 93, y: 0), CGPoint(x: 93, y: 186), CGGradientDrawingOptions())
        CGContextRestoreGState(context)
        DrudgeStyleKit.logoStroke.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()

        CGContextRestoreGState(context)


        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 2.94, 10.66)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 101.81, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 39.01))
        bezierPath.addLineToPoint(CGPoint(x: 97.21, y: 39.01))
        bezierPath.addCurveToPoint(CGPoint(x: 125.66, y: 21.6), controlPoint1: CGPoint(x: 116.18, y: 39.01), controlPoint2: CGPoint(x: 125.66, y: 33.21))
        bezierPath.addCurveToPoint(CGPoint(x: 101.81, y: 8.79), controlPoint1: CGPoint(x: 125.66, y: 13.06), controlPoint2: CGPoint(x: 117.71, y: 8.79))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 71.29, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 59.3, y: 8.79))
        bezierPath.addCurveToPoint(CGPoint(x: 37, y: 10.66), controlPoint1: CGPoint(x: 49.37, y: 8.79), controlPoint2: CGPoint(x: 41.94, y: 9.41))
        bezierPath.addCurveToPoint(CGPoint(x: 24.25, y: 17.63), controlPoint1: CGPoint(x: 32.05, y: 11.91), controlPoint2: CGPoint(x: 27.8, y: 14.24))
        bezierPath.addCurveToPoint(CGPoint(x: 15.45, y: 40.58), controlPoint1: CGPoint(x: 18.38, y: 23.19), controlPoint2: CGPoint(x: 15.45, y: 30.84))
        bezierPath.addCurveToPoint(CGPoint(x: 24.39, y: 65.37), controlPoint1: CGPoint(x: 15.45, y: 50.95), controlPoint2: CGPoint(x: 18.43, y: 59.22))
        bezierPath.addCurveToPoint(CGPoint(x: 52.65, y: 74.05), controlPoint1: CGPoint(x: 29.93, y: 71.16), controlPoint2: CGPoint(x: 39.35, y: 74.05))
        bezierPath.addLineToPoint(CGPoint(x: 71.29, y: 74.05))
        bezierPath.addLineToPoint(CGPoint(x: 71.29, y: 8.79))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 133.03, y: 5.26))
        bezierPath.addCurveToPoint(CGPoint(x: 141.18, y: 20.54), controlPoint1: CGPoint(x: 138.46, y: 8.77), controlPoint2: CGPoint(x: 141.18, y: 13.86))
        bezierPath.addCurveToPoint(CGPoint(x: 119.7, y: 44.05), controlPoint1: CGPoint(x: 141.18, y: 31.59), controlPoint2: CGPoint(x: 134.02, y: 39.42))
        bezierPath.addLineToPoint(CGPoint(x: 155.19, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 136.66, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 106.41, y: 47.8))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 47.8))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 51.54, y: 82.84))
        bezierPath.addCurveToPoint(CGPoint(x: 13.51, y: 71.47), controlPoint1: CGPoint(x: 35.19, y: 82.84), controlPoint2: CGPoint(x: 22.52, y: 79.05))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 39.46), controlPoint1: CGPoint(x: 4.5, y: 63.9), controlPoint2: CGPoint(x: 0, y: 53.23))
        bezierPath.addCurveToPoint(CGPoint(x: 10.88, y: 12.03), controlPoint1: CGPoint(x: 0, y: 28.12), controlPoint2: CGPoint(x: 3.63, y: 18.97))
        bezierPath.addCurveToPoint(CGPoint(x: 27.12, y: 2.74), controlPoint1: CGPoint(x: 15.45, y: 7.67), controlPoint2: CGPoint(x: 20.86, y: 4.57))
        bezierPath.addCurveToPoint(CGPoint(x: 51.75, y: 0), controlPoint1: CGPoint(x: 33.38, y: 0.91), controlPoint2: CGPoint(x: 41.59, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 109.57, y: 0))
        bezierPath.addCurveToPoint(CGPoint(x: 133.03, y: 5.26), controlPoint1: CGPoint(x: 119.77, y: 0), controlPoint2: CGPoint(x: 127.59, y: 1.75))
        bezierPath.closePath()
        DrudgeStyleKit.logoFill.setFill()
        bezierPath.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()

        CGContextRestoreGState(context)


        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 10, 14)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 27.76, y: 0))
        DrudgeStyleKit.logoLines.setFill()
        bezier2Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 8.5, 15.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier3Path.addLineToPoint(CGPoint(x: 35.08, y: 0))
        DrudgeStyleKit.logoLines.setFill()
        bezier3Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 17)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier4Path.addLineToPoint(CGPoint(x: 39.5, y: 0.5))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier4Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 18.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier5Path.addLineToPoint(CGPoint(x: 40, y: 0))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier5Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 20.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 0, y: -2.5))
        bezier6Path.addLineToPoint(CGPoint(x: 40, y: -2.5))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier6Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 8.5, 21.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier7Path.addLineToPoint(CGPoint(x: 35.39, y: 0))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier7Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 8 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9.5, 23)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier8Path.addLineToPoint(CGPoint(x: 29.91, y: 0))
        DrudgeStyleKit.logoBackgroundTop.setFill()
        bezier8Path.fill()
        DrudgeStyleKit.logoLines.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.stroke()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawRefresh() {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPoint(x: 30.91, y: 15))
        ovalPath.addCurveToPoint(CGPoint(x: 45.91, y: 30), controlPoint1: CGPoint(x: 39.19, y: 15), controlPoint2: CGPoint(x: 45.91, y: 21.72))
        ovalPath.addCurveToPoint(CGPoint(x: 30.91, y: 45), controlPoint1: CGPoint(x: 45.91, y: 38.28), controlPoint2: CGPoint(x: 39.19, y: 45))
        ovalPath.addCurveToPoint(CGPoint(x: 15.91, y: 30), controlPoint1: CGPoint(x: 22.63, y: 45), controlPoint2: CGPoint(x: 15.91, y: 38.28))
        DrudgeStyleKit.logoStroke.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 31, y: 22.05))
        bezierPath.addLineToPoint(CGPoint(x: 19.75, y: 15.49))
        bezierPath.addLineToPoint(CGPoint(x: 31, y: 8))
        bezierPath.addLineToPoint(CGPoint(x: 31, y: 21.86))
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        DrudgeStyleKit.logoStroke.setFill()
        bezierPath.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawPicture() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2.19, y: 9.02, width: 56.06, height: 41.72), cornerRadius: 3)
        DrudgeStyleKit.logoBaseSemiTransparent.setStroke()
        rectanglePath.lineWidth = 4
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.addLineToPoint(CGPoint(x: 52.25, y: 44.51))
        bezierPath.addLineToPoint(CGPoint(x: 52.31, y: 28.71))
        bezierPath.addLineToPoint(CGPoint(x: 38.94, y: 17.25))
        bezierPath.addLineToPoint(CGPoint(x: 23.06, y: 32.19))
        bezierPath.addLineToPoint(CGPoint(x: 16.6, y: 27.32))
        bezierPath.addLineToPoint(CGPoint(x: 8.58, y: 36))
        bezierPath.addLineToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.closePath()
        DrudgeStyleKit.logoBaseSemiTransparent.setFill()
        bezierPath.fill()
        DrudgeStyleKit.logoBaseSemiTransparent.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 8.52, y: 14.7, width: 7.22, height: 6.59))
        DrudgeStyleKit.logoBaseSemiTransparent.setFill()
        ovalPath.fill()
        DrudgeStyleKit.logoBaseSemiTransparent.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    public class func drawFilter() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 2.39, y: 2.6))
        bezierPath.addLineToPoint(CGPoint(x: 22.55, y: 2.6))
        bezierPath.addLineToPoint(CGPoint(x: 14.48, y: 11.86))
        bezierPath.addLineToPoint(CGPoint(x: 14.51, y: 23.13))
        bezierPath.addLineToPoint(CGPoint(x: 10.5, y: 20.54))
        bezierPath.addLineToPoint(CGPoint(x: 10.45, y: 12.01))
        bezierPath.addLineToPoint(CGPoint(x: 2.39, y: 2.6))
        bezierPath.closePath()
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        DrudgeStyleKit.logoStroke.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawNoFilter() {
        //// Color Declarations
        let color2 = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 23.92, y: 5.43))
        bezier4Path.addCurveToPoint(CGPoint(x: 19.61, y: 9.84), controlPoint1: CGPoint(x: 23.92, y: 7.86), controlPoint2: CGPoint(x: 21.99, y: 9.84))
        bezier4Path.addCurveToPoint(CGPoint(x: 17.02, y: 8.94), controlPoint1: CGPoint(x: 18.64, y: 9.84), controlPoint2: CGPoint(x: 17.74, y: 9.5))
        bezier4Path.addCurveToPoint(CGPoint(x: 14.48, y: 11.86), controlPoint1: CGPoint(x: 15.61, y: 10.56), controlPoint2: CGPoint(x: 14.48, y: 11.86))
        bezier4Path.addLineToPoint(CGPoint(x: 14.51, y: 23.13))
        bezier4Path.addLineToPoint(CGPoint(x: 10.5, y: 20.54))
        bezier4Path.addLineToPoint(CGPoint(x: 10.45, y: 12.01))
        bezier4Path.addLineToPoint(CGPoint(x: 2.39, y: 2.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 16.31, y: 2.6), controlPoint1: CGPoint(x: 2.39, y: 2.6), controlPoint2: CGPoint(x: 10.39, y: 2.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 19.61, y: 1.03), controlPoint1: CGPoint(x: 17.1, y: 1.64), controlPoint2: CGPoint(x: 18.29, y: 1.03))
        bezier4Path.addCurveToPoint(CGPoint(x: 23.92, y: 5.43), controlPoint1: CGPoint(x: 21.99, y: 1.03), controlPoint2: CGPoint(x: 23.92, y: 3))
        bezier4Path.closePath()
        bezier4Path.lineJoinStyle = .Round;

        DrudgeStyleKit.logoStroke.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()


        //// Group
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 18.52, y: 3.29))
        bezier2Path.addLineToPoint(CGPoint(x: 21.61, y: 6.78))
        bezier2Path.addCurveToPoint(CGPoint(x: 21.6, y: 7.5), controlPoint1: CGPoint(x: 21.78, y: 6.98), controlPoint2: CGPoint(x: 21.78, y: 7.3))
        bezier2Path.addCurveToPoint(CGPoint(x: 20.94, y: 7.49), controlPoint1: CGPoint(x: 21.41, y: 7.69), controlPoint2: CGPoint(x: 21.12, y: 7.69))
        bezier2Path.addLineToPoint(CGPoint(x: 17.85, y: 3.99))
        bezier2Path.addCurveToPoint(CGPoint(x: 17.86, y: 3.28), controlPoint1: CGPoint(x: 17.67, y: 3.79), controlPoint2: CGPoint(x: 17.68, y: 3.47))
        bezier2Path.addCurveToPoint(CGPoint(x: 18.52, y: 3.29), controlPoint1: CGPoint(x: 18.04, y: 3.08), controlPoint2: CGPoint(x: 18.34, y: 3.09))
        bezier2Path.closePath()
        color2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 17.86, y: 6.84))
        bezier3Path.addLineToPoint(CGPoint(x: 19.31, y: 5.15))
        bezier3Path.addLineToPoint(CGPoint(x: 19.61, y: 4.8))
        bezier3Path.addLineToPoint(CGPoint(x: 20.93, y: 3.27))
        bezier3Path.addCurveToPoint(CGPoint(x: 21.58, y: 3.25), controlPoint1: CGPoint(x: 21.1, y: 3.07), controlPoint2: CGPoint(x: 21.39, y: 3.06))
        bezier3Path.addCurveToPoint(CGPoint(x: 21.6, y: 3.96), controlPoint1: CGPoint(x: 21.77, y: 3.44), controlPoint2: CGPoint(x: 21.78, y: 3.76))
        bezier3Path.addLineToPoint(CGPoint(x: 20.29, y: 5.49))
        bezier3Path.addLineToPoint(CGPoint(x: 18.53, y: 7.54))
        bezier3Path.addCurveToPoint(CGPoint(x: 17.88, y: 7.56), controlPoint1: CGPoint(x: 18.36, y: 7.74), controlPoint2: CGPoint(x: 18.06, y: 7.75))
        bezier3Path.addCurveToPoint(CGPoint(x: 17.86, y: 6.84), controlPoint1: CGPoint(x: 17.69, y: 7.37), controlPoint2: CGPoint(x: 17.68, y: 7.05))
        bezier3Path.closePath()
        color2.setFill()
        bezier3Path.fill()
    }

    public class func drawMiniLogo() {

        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.moveToPoint(CGPoint(x: 9.59, y: 17.72))
        textPath.addLineToPoint(CGPoint(x: 9.59, y: 8.75))
        textPath.addLineToPoint(CGPoint(x: 7.1, y: 8.75))
        textPath.addCurveToPoint(CGPoint(x: 5.37, y: 9.05), controlPoint1: CGPoint(x: 6.41, y: 8.75), controlPoint2: CGPoint(x: 5.84, y: 8.85))
        textPath.addCurveToPoint(CGPoint(x: 4.22, y: 9.92), controlPoint1: CGPoint(x: 4.9, y: 9.25), controlPoint2: CGPoint(x: 4.52, y: 9.54))
        textPath.addCurveToPoint(CGPoint(x: 3.58, y: 11.31), controlPoint1: CGPoint(x: 3.92, y: 10.3), controlPoint2: CGPoint(x: 3.71, y: 10.77))
        textPath.addCurveToPoint(CGPoint(x: 3.39, y: 13.17), controlPoint1: CGPoint(x: 3.45, y: 11.86), controlPoint2: CGPoint(x: 3.39, y: 12.48))
        textPath.addCurveToPoint(CGPoint(x: 3.6, y: 14.99), controlPoint1: CGPoint(x: 3.39, y: 13.88), controlPoint2: CGPoint(x: 3.46, y: 14.49))
        textPath.addCurveToPoint(CGPoint(x: 4.14, y: 16.25), controlPoint1: CGPoint(x: 3.74, y: 15.49), controlPoint2: CGPoint(x: 3.92, y: 15.91))
        textPath.addCurveToPoint(CGPoint(x: 4.88, y: 17.04), controlPoint1: CGPoint(x: 4.35, y: 16.58), controlPoint2: CGPoint(x: 4.6, y: 16.85))
        textPath.addCurveToPoint(CGPoint(x: 5.71, y: 17.49), controlPoint1: CGPoint(x: 5.15, y: 17.23), controlPoint2: CGPoint(x: 5.43, y: 17.38))
        textPath.addCurveToPoint(CGPoint(x: 6.51, y: 17.68), controlPoint1: CGPoint(x: 5.99, y: 17.59), controlPoint2: CGPoint(x: 6.26, y: 17.65))
        textPath.addCurveToPoint(CGPoint(x: 7.13, y: 17.72), controlPoint1: CGPoint(x: 6.76, y: 17.71), controlPoint2: CGPoint(x: 6.96, y: 17.72))
        textPath.addLineToPoint(CGPoint(x: 9.59, y: 17.72))
        textPath.closePath()
        textPath.moveToPoint(CGPoint(x: 11.08, y: 7.45))
        textPath.addLineToPoint(CGPoint(x: 11.08, y: 19.02))
        textPath.addLineToPoint(CGPoint(x: 7.26, y: 19.02))
        textPath.addCurveToPoint(CGPoint(x: 4.85, y: 18.61), controlPoint1: CGPoint(x: 6.33, y: 19.02), controlPoint2: CGPoint(x: 5.53, y: 18.88))
        textPath.addCurveToPoint(CGPoint(x: 3.18, y: 17.44), controlPoint1: CGPoint(x: 4.18, y: 18.34), controlPoint2: CGPoint(x: 3.62, y: 17.95))
        textPath.addCurveToPoint(CGPoint(x: 2.22, y: 15.54), controlPoint1: CGPoint(x: 2.75, y: 16.92), controlPoint2: CGPoint(x: 2.42, y: 16.29))
        textPath.addCurveToPoint(CGPoint(x: 1.9, y: 12.96), controlPoint1: CGPoint(x: 2.01, y: 14.79), controlPoint2: CGPoint(x: 1.9, y: 13.93))
        textPath.addCurveToPoint(CGPoint(x: 3.29, y: 8.81), controlPoint1: CGPoint(x: 1.9, y: 11.1), controlPoint2: CGPoint(x: 2.37, y: 9.72))
        textPath.addCurveToPoint(CGPoint(x: 7.26, y: 7.45), controlPoint1: CGPoint(x: 4.22, y: 7.9), controlPoint2: CGPoint(x: 5.54, y: 7.45))
        textPath.addLineToPoint(CGPoint(x: 11.08, y: 7.45))
        textPath.closePath()
        DrudgeStyleKit.logoLines.setFill()
        textPath.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        textPath.lineWidth = 1
        textPath.stroke()


        //// Text 2 Drawing
        let text2Path = UIBezierPath()
        text2Path.moveToPoint(CGPoint(x: 13.63, y: 7.44))
        text2Path.addLineToPoint(CGPoint(x: 13.63, y: 19.01))
        text2Path.addLineToPoint(CGPoint(x: 15.11, y: 19.01))
        text2Path.addLineToPoint(CGPoint(x: 15.11, y: 14.07))
        text2Path.addLineToPoint(CGPoint(x: 18.71, y: 14.07))
        text2Path.addCurveToPoint(CGPoint(x: 19.58, y: 14.24), controlPoint1: CGPoint(x: 19.07, y: 14.07), controlPoint2: CGPoint(x: 19.36, y: 14.13))
        text2Path.addCurveToPoint(CGPoint(x: 20.11, y: 14.69), controlPoint1: CGPoint(x: 19.8, y: 14.35), controlPoint2: CGPoint(x: 19.98, y: 14.5))
        text2Path.addCurveToPoint(CGPoint(x: 20.41, y: 15.36), controlPoint1: CGPoint(x: 20.25, y: 14.88), controlPoint2: CGPoint(x: 20.34, y: 15.1))
        text2Path.addCurveToPoint(CGPoint(x: 20.56, y: 16.16), controlPoint1: CGPoint(x: 20.47, y: 15.61), controlPoint2: CGPoint(x: 20.52, y: 15.88))
        text2Path.addCurveToPoint(CGPoint(x: 20.65, y: 17.02), controlPoint1: CGPoint(x: 20.61, y: 16.44), controlPoint2: CGPoint(x: 20.64, y: 16.73))
        text2Path.addCurveToPoint(CGPoint(x: 20.69, y: 17.84), controlPoint1: CGPoint(x: 20.66, y: 17.31), controlPoint2: CGPoint(x: 20.68, y: 17.58))
        text2Path.addCurveToPoint(CGPoint(x: 20.76, y: 18.52), controlPoint1: CGPoint(x: 20.7, y: 18.09), controlPoint2: CGPoint(x: 20.72, y: 18.32))
        text2Path.addCurveToPoint(CGPoint(x: 20.97, y: 19.01), controlPoint1: CGPoint(x: 20.79, y: 18.73), controlPoint2: CGPoint(x: 20.86, y: 18.89))
        text2Path.addLineToPoint(CGPoint(x: 22.61, y: 19.01))
        text2Path.addCurveToPoint(CGPoint(x: 22.26, y: 18.34), controlPoint1: CGPoint(x: 22.46, y: 18.82), controlPoint2: CGPoint(x: 22.34, y: 18.59))
        text2Path.addCurveToPoint(CGPoint(x: 22.08, y: 17.54), controlPoint1: CGPoint(x: 22.19, y: 18.08), controlPoint2: CGPoint(x: 22.13, y: 17.82))
        text2Path.addCurveToPoint(CGPoint(x: 22.01, y: 16.68), controlPoint1: CGPoint(x: 22.04, y: 17.26), controlPoint2: CGPoint(x: 22.02, y: 16.97))
        text2Path.addCurveToPoint(CGPoint(x: 21.96, y: 15.82), controlPoint1: CGPoint(x: 22, y: 16.39), controlPoint2: CGPoint(x: 21.98, y: 16.1))
        text2Path.addCurveToPoint(CGPoint(x: 21.83, y: 15.01), controlPoint1: CGPoint(x: 21.93, y: 15.54), controlPoint2: CGPoint(x: 21.88, y: 15.27))
        text2Path.addCurveToPoint(CGPoint(x: 21.56, y: 14.3), controlPoint1: CGPoint(x: 21.77, y: 14.75), controlPoint2: CGPoint(x: 21.68, y: 14.52))
        text2Path.addCurveToPoint(CGPoint(x: 21.08, y: 13.76), controlPoint1: CGPoint(x: 21.44, y: 14.09), controlPoint2: CGPoint(x: 21.28, y: 13.91))
        text2Path.addCurveToPoint(CGPoint(x: 20.3, y: 13.44), controlPoint1: CGPoint(x: 20.88, y: 13.61), controlPoint2: CGPoint(x: 20.62, y: 13.5))
        text2Path.addLineToPoint(CGPoint(x: 20.3, y: 13.41))
        text2Path.addCurveToPoint(CGPoint(x: 21.77, y: 12.32), controlPoint1: CGPoint(x: 20.97, y: 13.21), controlPoint2: CGPoint(x: 21.46, y: 12.85))
        text2Path.addCurveToPoint(CGPoint(x: 22.22, y: 10.47), controlPoint1: CGPoint(x: 22.07, y: 11.79), controlPoint2: CGPoint(x: 22.22, y: 11.18))
        text2Path.addCurveToPoint(CGPoint(x: 21.33, y: 8.25), controlPoint1: CGPoint(x: 22.22, y: 9.53), controlPoint2: CGPoint(x: 21.93, y: 8.79))
        text2Path.addCurveToPoint(CGPoint(x: 18.85, y: 7.44), controlPoint1: CGPoint(x: 20.73, y: 7.71), controlPoint2: CGPoint(x: 19.91, y: 7.44))
        text2Path.addLineToPoint(CGPoint(x: 13.63, y: 7.44))
        text2Path.closePath()
        text2Path.moveToPoint(CGPoint(x: 18.18, y: 12.77))
        text2Path.addLineToPoint(CGPoint(x: 15.11, y: 12.77))
        text2Path.addLineToPoint(CGPoint(x: 15.11, y: 8.74))
        text2Path.addLineToPoint(CGPoint(x: 18.77, y: 8.74))
        text2Path.addCurveToPoint(CGPoint(x: 20.28, y: 9.29), controlPoint1: CGPoint(x: 19.47, y: 8.74), controlPoint2: CGPoint(x: 19.97, y: 8.92))
        text2Path.addCurveToPoint(CGPoint(x: 20.75, y: 10.72), controlPoint1: CGPoint(x: 20.59, y: 9.66), controlPoint2: CGPoint(x: 20.75, y: 10.13))
        text2Path.addCurveToPoint(CGPoint(x: 20.54, y: 11.75), controlPoint1: CGPoint(x: 20.75, y: 11.14), controlPoint2: CGPoint(x: 20.68, y: 11.48))
        text2Path.addCurveToPoint(CGPoint(x: 19.98, y: 12.38), controlPoint1: CGPoint(x: 20.4, y: 12.01), controlPoint2: CGPoint(x: 20.21, y: 12.22))
        text2Path.addCurveToPoint(CGPoint(x: 19.16, y: 12.69), controlPoint1: CGPoint(x: 19.75, y: 12.53), controlPoint2: CGPoint(x: 19.47, y: 12.64))
        text2Path.addCurveToPoint(CGPoint(x: 18.18, y: 12.77), controlPoint1: CGPoint(x: 18.85, y: 12.75), controlPoint2: CGPoint(x: 18.53, y: 12.77))
        text2Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text2Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()
    }

    public class func drawMiniLogo2() {

        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.moveToPoint(CGPoint(x: 9.59, y: 13.72))
        textPath.addLineToPoint(CGPoint(x: 9.59, y: 4.75))
        textPath.addLineToPoint(CGPoint(x: 7.1, y: 4.75))
        textPath.addCurveToPoint(CGPoint(x: 5.37, y: 5.05), controlPoint1: CGPoint(x: 6.41, y: 4.75), controlPoint2: CGPoint(x: 5.84, y: 4.85))
        textPath.addCurveToPoint(CGPoint(x: 4.22, y: 5.92), controlPoint1: CGPoint(x: 4.9, y: 5.25), controlPoint2: CGPoint(x: 4.52, y: 5.54))
        textPath.addCurveToPoint(CGPoint(x: 3.58, y: 7.31), controlPoint1: CGPoint(x: 3.92, y: 6.3), controlPoint2: CGPoint(x: 3.71, y: 6.77))
        textPath.addCurveToPoint(CGPoint(x: 3.39, y: 9.17), controlPoint1: CGPoint(x: 3.45, y: 7.86), controlPoint2: CGPoint(x: 3.39, y: 8.48))
        textPath.addCurveToPoint(CGPoint(x: 3.6, y: 10.99), controlPoint1: CGPoint(x: 3.39, y: 9.88), controlPoint2: CGPoint(x: 3.46, y: 10.49))
        textPath.addCurveToPoint(CGPoint(x: 4.14, y: 12.25), controlPoint1: CGPoint(x: 3.74, y: 11.49), controlPoint2: CGPoint(x: 3.92, y: 11.91))
        textPath.addCurveToPoint(CGPoint(x: 4.88, y: 13.04), controlPoint1: CGPoint(x: 4.35, y: 12.58), controlPoint2: CGPoint(x: 4.6, y: 12.85))
        textPath.addCurveToPoint(CGPoint(x: 5.71, y: 13.49), controlPoint1: CGPoint(x: 5.15, y: 13.23), controlPoint2: CGPoint(x: 5.43, y: 13.38))
        textPath.addCurveToPoint(CGPoint(x: 6.51, y: 13.68), controlPoint1: CGPoint(x: 5.99, y: 13.59), controlPoint2: CGPoint(x: 6.26, y: 13.65))
        textPath.addCurveToPoint(CGPoint(x: 7.13, y: 13.72), controlPoint1: CGPoint(x: 6.76, y: 13.71), controlPoint2: CGPoint(x: 6.96, y: 13.72))
        textPath.addLineToPoint(CGPoint(x: 9.59, y: 13.72))
        textPath.closePath()
        textPath.moveToPoint(CGPoint(x: 11.08, y: 3.45))
        textPath.addLineToPoint(CGPoint(x: 11.08, y: 15.02))
        textPath.addLineToPoint(CGPoint(x: 7.26, y: 15.02))
        textPath.addCurveToPoint(CGPoint(x: 4.85, y: 14.61), controlPoint1: CGPoint(x: 6.33, y: 15.02), controlPoint2: CGPoint(x: 5.53, y: 14.88))
        textPath.addCurveToPoint(CGPoint(x: 3.18, y: 13.44), controlPoint1: CGPoint(x: 4.18, y: 14.34), controlPoint2: CGPoint(x: 3.62, y: 13.95))
        textPath.addCurveToPoint(CGPoint(x: 2.22, y: 11.54), controlPoint1: CGPoint(x: 2.75, y: 12.92), controlPoint2: CGPoint(x: 2.42, y: 12.29))
        textPath.addCurveToPoint(CGPoint(x: 1.9, y: 8.96), controlPoint1: CGPoint(x: 2.01, y: 10.79), controlPoint2: CGPoint(x: 1.9, y: 9.93))
        textPath.addCurveToPoint(CGPoint(x: 3.29, y: 4.81), controlPoint1: CGPoint(x: 1.9, y: 7.1), controlPoint2: CGPoint(x: 2.37, y: 5.72))
        textPath.addCurveToPoint(CGPoint(x: 7.26, y: 3.45), controlPoint1: CGPoint(x: 4.22, y: 3.9), controlPoint2: CGPoint(x: 5.54, y: 3.45))
        textPath.addLineToPoint(CGPoint(x: 11.08, y: 3.45))
        textPath.closePath()
        DrudgeStyleKit.logoLines.setFill()
        textPath.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        textPath.lineWidth = 1
        textPath.stroke()


        //// Text 2 Drawing
        let text2Path = UIBezierPath()
        text2Path.moveToPoint(CGPoint(x: 14.63, y: 3.44))
        text2Path.addLineToPoint(CGPoint(x: 14.63, y: 15.01))
        text2Path.addLineToPoint(CGPoint(x: 16.11, y: 15.01))
        text2Path.addLineToPoint(CGPoint(x: 16.11, y: 10.07))
        text2Path.addLineToPoint(CGPoint(x: 19.71, y: 10.07))
        text2Path.addCurveToPoint(CGPoint(x: 20.58, y: 10.24), controlPoint1: CGPoint(x: 20.07, y: 10.07), controlPoint2: CGPoint(x: 20.36, y: 10.13))
        text2Path.addCurveToPoint(CGPoint(x: 21.11, y: 10.69), controlPoint1: CGPoint(x: 20.8, y: 10.35), controlPoint2: CGPoint(x: 20.98, y: 10.5))
        text2Path.addCurveToPoint(CGPoint(x: 21.41, y: 11.36), controlPoint1: CGPoint(x: 21.25, y: 10.88), controlPoint2: CGPoint(x: 21.34, y: 11.1))
        text2Path.addCurveToPoint(CGPoint(x: 21.56, y: 12.16), controlPoint1: CGPoint(x: 21.47, y: 11.61), controlPoint2: CGPoint(x: 21.52, y: 11.88))
        text2Path.addCurveToPoint(CGPoint(x: 21.65, y: 13.02), controlPoint1: CGPoint(x: 21.61, y: 12.44), controlPoint2: CGPoint(x: 21.64, y: 12.73))
        text2Path.addCurveToPoint(CGPoint(x: 21.69, y: 13.84), controlPoint1: CGPoint(x: 21.66, y: 13.31), controlPoint2: CGPoint(x: 21.68, y: 13.58))
        text2Path.addCurveToPoint(CGPoint(x: 21.76, y: 14.52), controlPoint1: CGPoint(x: 21.7, y: 14.09), controlPoint2: CGPoint(x: 21.72, y: 14.32))
        text2Path.addCurveToPoint(CGPoint(x: 21.97, y: 15.01), controlPoint1: CGPoint(x: 21.79, y: 14.73), controlPoint2: CGPoint(x: 21.86, y: 14.89))
        text2Path.addLineToPoint(CGPoint(x: 23.61, y: 15.01))
        text2Path.addCurveToPoint(CGPoint(x: 23.26, y: 14.34), controlPoint1: CGPoint(x: 23.46, y: 14.82), controlPoint2: CGPoint(x: 23.34, y: 14.59))
        text2Path.addCurveToPoint(CGPoint(x: 23.08, y: 13.54), controlPoint1: CGPoint(x: 23.19, y: 14.08), controlPoint2: CGPoint(x: 23.13, y: 13.82))
        text2Path.addCurveToPoint(CGPoint(x: 23.01, y: 12.68), controlPoint1: CGPoint(x: 23.04, y: 13.26), controlPoint2: CGPoint(x: 23.02, y: 12.97))
        text2Path.addCurveToPoint(CGPoint(x: 22.96, y: 11.82), controlPoint1: CGPoint(x: 23, y: 12.39), controlPoint2: CGPoint(x: 22.98, y: 12.1))
        text2Path.addCurveToPoint(CGPoint(x: 22.83, y: 11.01), controlPoint1: CGPoint(x: 22.93, y: 11.54), controlPoint2: CGPoint(x: 22.88, y: 11.27))
        text2Path.addCurveToPoint(CGPoint(x: 22.56, y: 10.3), controlPoint1: CGPoint(x: 22.77, y: 10.75), controlPoint2: CGPoint(x: 22.68, y: 10.52))
        text2Path.addCurveToPoint(CGPoint(x: 22.08, y: 9.76), controlPoint1: CGPoint(x: 22.44, y: 10.09), controlPoint2: CGPoint(x: 22.28, y: 9.91))
        text2Path.addCurveToPoint(CGPoint(x: 21.3, y: 9.44), controlPoint1: CGPoint(x: 21.88, y: 9.61), controlPoint2: CGPoint(x: 21.62, y: 9.5))
        text2Path.addLineToPoint(CGPoint(x: 21.3, y: 9.41))
        text2Path.addCurveToPoint(CGPoint(x: 22.77, y: 8.32), controlPoint1: CGPoint(x: 21.97, y: 9.21), controlPoint2: CGPoint(x: 22.46, y: 8.85))
        text2Path.addCurveToPoint(CGPoint(x: 23.22, y: 6.47), controlPoint1: CGPoint(x: 23.07, y: 7.79), controlPoint2: CGPoint(x: 23.22, y: 7.18))
        text2Path.addCurveToPoint(CGPoint(x: 22.33, y: 4.25), controlPoint1: CGPoint(x: 23.22, y: 5.53), controlPoint2: CGPoint(x: 22.93, y: 4.79))
        text2Path.addCurveToPoint(CGPoint(x: 19.85, y: 3.44), controlPoint1: CGPoint(x: 21.73, y: 3.71), controlPoint2: CGPoint(x: 20.91, y: 3.44))
        text2Path.addLineToPoint(CGPoint(x: 14.63, y: 3.44))
        text2Path.closePath()
        text2Path.moveToPoint(CGPoint(x: 19.18, y: 8.77))
        text2Path.addLineToPoint(CGPoint(x: 16.11, y: 8.77))
        text2Path.addLineToPoint(CGPoint(x: 16.11, y: 4.74))
        text2Path.addLineToPoint(CGPoint(x: 19.77, y: 4.74))
        text2Path.addCurveToPoint(CGPoint(x: 21.28, y: 5.29), controlPoint1: CGPoint(x: 20.47, y: 4.74), controlPoint2: CGPoint(x: 20.97, y: 4.92))
        text2Path.addCurveToPoint(CGPoint(x: 21.75, y: 6.72), controlPoint1: CGPoint(x: 21.59, y: 5.66), controlPoint2: CGPoint(x: 21.75, y: 6.13))
        text2Path.addCurveToPoint(CGPoint(x: 21.54, y: 7.75), controlPoint1: CGPoint(x: 21.75, y: 7.14), controlPoint2: CGPoint(x: 21.68, y: 7.48))
        text2Path.addCurveToPoint(CGPoint(x: 20.98, y: 8.38), controlPoint1: CGPoint(x: 21.4, y: 8.01), controlPoint2: CGPoint(x: 21.21, y: 8.22))
        text2Path.addCurveToPoint(CGPoint(x: 20.16, y: 8.69), controlPoint1: CGPoint(x: 20.75, y: 8.53), controlPoint2: CGPoint(x: 20.47, y: 8.64))
        text2Path.addCurveToPoint(CGPoint(x: 19.18, y: 8.77), controlPoint1: CGPoint(x: 19.85, y: 8.75), controlPoint2: CGPoint(x: 19.53, y: 8.77))
        text2Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text2Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text2Path.lineWidth = 1
        text2Path.stroke()


        //// Text 3 Drawing
        let text3Path = UIBezierPath()
        text3Path.moveToPoint(CGPoint(x: 35.7, y: 11.2))
        text3Path.addLineToPoint(CGPoint(x: 35.7, y: 3.91))
        text3Path.addLineToPoint(CGPoint(x: 34.18, y: 3.91))
        text3Path.addLineToPoint(CGPoint(x: 34.18, y: 11.2))
        text3Path.addCurveToPoint(CGPoint(x: 33.42, y: 13.53), controlPoint1: CGPoint(x: 34.18, y: 12.23), controlPoint2: CGPoint(x: 33.92, y: 13))
        text3Path.addCurveToPoint(CGPoint(x: 31.2, y: 14.32), controlPoint1: CGPoint(x: 32.91, y: 14.06), controlPoint2: CGPoint(x: 32.17, y: 14.32))
        text3Path.addCurveToPoint(CGPoint(x: 28.85, y: 13.53), controlPoint1: CGPoint(x: 30.18, y: 14.32), controlPoint2: CGPoint(x: 29.39, y: 14.06))
        text3Path.addCurveToPoint(CGPoint(x: 28.03, y: 11.2), controlPoint1: CGPoint(x: 28.31, y: 13), controlPoint2: CGPoint(x: 28.03, y: 12.23))
        text3Path.addLineToPoint(CGPoint(x: 28.03, y: 3.91))
        text3Path.addLineToPoint(CGPoint(x: 26.51, y: 3.91))
        text3Path.addLineToPoint(CGPoint(x: 26.51, y: 11.2))
        text3Path.addCurveToPoint(CGPoint(x: 27.75, y: 14.54), controlPoint1: CGPoint(x: 26.51, y: 12.73), controlPoint2: CGPoint(x: 26.93, y: 13.84))
        text3Path.addCurveToPoint(CGPoint(x: 31.2, y: 15.59), controlPoint1: CGPoint(x: 28.58, y: 15.24), controlPoint2: CGPoint(x: 29.73, y: 15.59))
        text3Path.addCurveToPoint(CGPoint(x: 34.53, y: 14.49), controlPoint1: CGPoint(x: 32.64, y: 15.59), controlPoint2: CGPoint(x: 33.75, y: 15.22))
        text3Path.addCurveToPoint(CGPoint(x: 35.7, y: 11.2), controlPoint1: CGPoint(x: 35.31, y: 13.76), controlPoint2: CGPoint(x: 35.7, y: 12.67))
        text3Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text3Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text3Path.lineWidth = 1
        text3Path.stroke()


        //// Group
        //// Text 4 Drawing
        let text4Path = UIBezierPath()
        text4Path.moveToPoint(CGPoint(x: 59.5, y: 13.9))
        text4Path.addLineToPoint(CGPoint(x: 59.9, y: 15.33))
        text4Path.addLineToPoint(CGPoint(x: 60.86, y: 15.33))
        text4Path.addLineToPoint(CGPoint(x: 60.86, y: 9.31))
        text4Path.addLineToPoint(CGPoint(x: 55.85, y: 9.31))
        text4Path.addLineToPoint(CGPoint(x: 55.85, y: 10.59))
        text4Path.addLineToPoint(CGPoint(x: 59.5, y: 10.59))
        text4Path.addCurveToPoint(CGPoint(x: 59.29, y: 12.05), controlPoint1: CGPoint(x: 59.52, y: 11.11), controlPoint2: CGPoint(x: 59.45, y: 11.6))
        text4Path.addCurveToPoint(CGPoint(x: 58.58, y: 13.24), controlPoint1: CGPoint(x: 59.13, y: 12.51), controlPoint2: CGPoint(x: 58.9, y: 12.9))
        text4Path.addCurveToPoint(CGPoint(x: 57.42, y: 14.03), controlPoint1: CGPoint(x: 58.27, y: 13.57), controlPoint2: CGPoint(x: 57.88, y: 13.84))
        text4Path.addCurveToPoint(CGPoint(x: 55.84, y: 14.32), controlPoint1: CGPoint(x: 56.96, y: 14.22), controlPoint2: CGPoint(x: 56.44, y: 14.32))
        text4Path.addCurveToPoint(CGPoint(x: 54.15, y: 13.94), controlPoint1: CGPoint(x: 55.2, y: 14.32), controlPoint2: CGPoint(x: 54.64, y: 14.19))
        text4Path.addCurveToPoint(CGPoint(x: 52.93, y: 12.93), controlPoint1: CGPoint(x: 53.66, y: 13.69), controlPoint2: CGPoint(x: 53.26, y: 13.36))
        text4Path.addCurveToPoint(CGPoint(x: 52.17, y: 11.48), controlPoint1: CGPoint(x: 52.6, y: 12.51), controlPoint2: CGPoint(x: 52.34, y: 12.03))
        text4Path.addCurveToPoint(CGPoint(x: 51.92, y: 9.76), controlPoint1: CGPoint(x: 52, y: 10.93), controlPoint2: CGPoint(x: 51.92, y: 10.36))
        text4Path.addCurveToPoint(CGPoint(x: 52.14, y: 7.97), controlPoint1: CGPoint(x: 51.92, y: 9.15), controlPoint2: CGPoint(x: 51.99, y: 8.56))
        text4Path.addCurveToPoint(CGPoint(x: 52.84, y: 6.42), controlPoint1: CGPoint(x: 52.29, y: 7.39), controlPoint2: CGPoint(x: 52.52, y: 6.88))
        text4Path.addCurveToPoint(CGPoint(x: 54.05, y: 5.33), controlPoint1: CGPoint(x: 53.15, y: 5.97), controlPoint2: CGPoint(x: 53.56, y: 5.6))
        text4Path.addCurveToPoint(CGPoint(x: 55.84, y: 4.91), controlPoint1: CGPoint(x: 54.55, y: 5.05), controlPoint2: CGPoint(x: 55.14, y: 4.91))
        text4Path.addCurveToPoint(CGPoint(x: 57.05, y: 5.06), controlPoint1: CGPoint(x: 56.26, y: 4.91), controlPoint2: CGPoint(x: 56.67, y: 4.96))
        text4Path.addCurveToPoint(CGPoint(x: 58.06, y: 5.52), controlPoint1: CGPoint(x: 57.42, y: 5.16), controlPoint2: CGPoint(x: 57.76, y: 5.32))
        text4Path.addCurveToPoint(CGPoint(x: 58.81, y: 6.29), controlPoint1: CGPoint(x: 58.36, y: 5.72), controlPoint2: CGPoint(x: 58.61, y: 5.98))
        text4Path.addCurveToPoint(CGPoint(x: 59.23, y: 7.42), controlPoint1: CGPoint(x: 59.02, y: 6.61), controlPoint2: CGPoint(x: 59.16, y: 6.99))
        text4Path.addLineToPoint(CGPoint(x: 60.75, y: 7.42))
        text4Path.addCurveToPoint(CGPoint(x: 60.15, y: 5.7), controlPoint1: CGPoint(x: 60.64, y: 6.75), controlPoint2: CGPoint(x: 60.44, y: 6.18))
        text4Path.addCurveToPoint(CGPoint(x: 59.06, y: 4.53), controlPoint1: CGPoint(x: 59.86, y: 5.23), controlPoint2: CGPoint(x: 59.49, y: 4.84))
        text4Path.addCurveToPoint(CGPoint(x: 57.59, y: 3.85), controlPoint1: CGPoint(x: 58.63, y: 4.22), controlPoint2: CGPoint(x: 58.14, y: 3.99))
        text4Path.addCurveToPoint(CGPoint(x: 55.84, y: 3.63), controlPoint1: CGPoint(x: 57.04, y: 3.7), controlPoint2: CGPoint(x: 56.46, y: 3.63))
        text4Path.addCurveToPoint(CGPoint(x: 53.46, y: 4.13), controlPoint1: CGPoint(x: 54.93, y: 3.63), controlPoint2: CGPoint(x: 54.14, y: 3.8))
        text4Path.addCurveToPoint(CGPoint(x: 51.77, y: 5.49), controlPoint1: CGPoint(x: 52.78, y: 4.47), controlPoint2: CGPoint(x: 52.22, y: 4.92))
        text4Path.addCurveToPoint(CGPoint(x: 50.74, y: 7.46), controlPoint1: CGPoint(x: 51.31, y: 6.05), controlPoint2: CGPoint(x: 50.97, y: 6.71))
        text4Path.addCurveToPoint(CGPoint(x: 50.4, y: 9.84), controlPoint1: CGPoint(x: 50.51, y: 8.21), controlPoint2: CGPoint(x: 50.4, y: 9.01))
        text4Path.addCurveToPoint(CGPoint(x: 50.77, y: 12), controlPoint1: CGPoint(x: 50.4, y: 10.59), controlPoint2: CGPoint(x: 50.52, y: 11.31))
        text4Path.addCurveToPoint(CGPoint(x: 51.84, y: 13.84), controlPoint1: CGPoint(x: 51.01, y: 12.69), controlPoint2: CGPoint(x: 51.37, y: 13.31))
        text4Path.addCurveToPoint(CGPoint(x: 53.55, y: 15.11), controlPoint1: CGPoint(x: 52.31, y: 14.37), controlPoint2: CGPoint(x: 52.88, y: 14.8))
        text4Path.addCurveToPoint(CGPoint(x: 55.84, y: 15.58), controlPoint1: CGPoint(x: 54.22, y: 15.43), controlPoint2: CGPoint(x: 54.98, y: 15.58))
        text4Path.addCurveToPoint(CGPoint(x: 57.84, y: 15.19), controlPoint1: CGPoint(x: 56.51, y: 15.58), controlPoint2: CGPoint(x: 57.18, y: 15.45))
        text4Path.addCurveToPoint(CGPoint(x: 59.5, y: 13.9), controlPoint1: CGPoint(x: 58.5, y: 14.93), controlPoint2: CGPoint(x: 59.05, y: 14.5))
        text4Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text4Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text4Path.lineWidth = 1
        text4Path.stroke()


        //// Text 5 Drawing
        let text5Path = UIBezierPath()
        text5Path.moveToPoint(CGPoint(x: 40.14, y: 13.9))
        text5Path.addLineToPoint(CGPoint(x: 40.14, y: 5.04))
        text5Path.addLineToPoint(CGPoint(x: 42.7, y: 5.04))
        text5Path.addCurveToPoint(CGPoint(x: 44.48, y: 5.34), controlPoint1: CGPoint(x: 43.41, y: 5.04), controlPoint2: CGPoint(x: 44, y: 5.14))
        text5Path.addCurveToPoint(CGPoint(x: 45.65, y: 6.2), controlPoint1: CGPoint(x: 44.96, y: 5.53), controlPoint2: CGPoint(x: 45.35, y: 5.82))
        text5Path.addCurveToPoint(CGPoint(x: 46.31, y: 7.58), controlPoint1: CGPoint(x: 45.96, y: 6.58), controlPoint2: CGPoint(x: 46.18, y: 7.04))
        text5Path.addCurveToPoint(CGPoint(x: 46.51, y: 9.41), controlPoint1: CGPoint(x: 46.44, y: 8.12), controlPoint2: CGPoint(x: 46.51, y: 8.73))
        text5Path.addCurveToPoint(CGPoint(x: 46.29, y: 11.21), controlPoint1: CGPoint(x: 46.51, y: 10.11), controlPoint2: CGPoint(x: 46.44, y: 10.71))
        text5Path.addCurveToPoint(CGPoint(x: 45.74, y: 12.45), controlPoint1: CGPoint(x: 46.15, y: 11.7), controlPoint2: CGPoint(x: 45.97, y: 12.12))
        text5Path.addCurveToPoint(CGPoint(x: 44.98, y: 13.23), controlPoint1: CGPoint(x: 45.52, y: 12.78), controlPoint2: CGPoint(x: 45.26, y: 13.04))
        text5Path.addCurveToPoint(CGPoint(x: 44.13, y: 13.67), controlPoint1: CGPoint(x: 44.7, y: 13.42), controlPoint2: CGPoint(x: 44.41, y: 13.57))
        text5Path.addCurveToPoint(CGPoint(x: 43.31, y: 13.86), controlPoint1: CGPoint(x: 43.84, y: 13.77), controlPoint2: CGPoint(x: 43.57, y: 13.84))
        text5Path.addCurveToPoint(CGPoint(x: 42.67, y: 13.9), controlPoint1: CGPoint(x: 43.05, y: 13.89), controlPoint2: CGPoint(x: 42.84, y: 13.9))
        text5Path.addLineToPoint(CGPoint(x: 40.14, y: 13.9))
        text5Path.closePath()
        text5Path.moveToPoint(CGPoint(x: 38.62, y: 3.76))
        text5Path.addLineToPoint(CGPoint(x: 38.62, y: 15.18))
        text5Path.addLineToPoint(CGPoint(x: 42.54, y: 15.18))
        text5Path.addCurveToPoint(CGPoint(x: 45.01, y: 14.78), controlPoint1: CGPoint(x: 43.49, y: 15.18), controlPoint2: CGPoint(x: 44.31, y: 15.05))
        text5Path.addCurveToPoint(CGPoint(x: 46.72, y: 13.62), controlPoint1: CGPoint(x: 45.7, y: 14.52), controlPoint2: CGPoint(x: 46.27, y: 14.13))
        text5Path.addCurveToPoint(CGPoint(x: 47.71, y: 11.75), controlPoint1: CGPoint(x: 47.17, y: 13.12), controlPoint2: CGPoint(x: 47.5, y: 12.49))
        text5Path.addCurveToPoint(CGPoint(x: 48.03, y: 9.2), controlPoint1: CGPoint(x: 47.92, y: 11.01), controlPoint2: CGPoint(x: 48.03, y: 10.16))
        text5Path.addCurveToPoint(CGPoint(x: 46.61, y: 5.1), controlPoint1: CGPoint(x: 48.03, y: 7.37), controlPoint2: CGPoint(x: 47.55, y: 6))
        text5Path.addCurveToPoint(CGPoint(x: 42.54, y: 3.76), controlPoint1: CGPoint(x: 45.66, y: 4.21), controlPoint2: CGPoint(x: 44.3, y: 3.76))
        text5Path.addLineToPoint(CGPoint(x: 38.62, y: 3.76))
        text5Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text5Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text5Path.lineWidth = 1
        text5Path.stroke()




        //// Text 6 Drawing
        let text6Path = UIBezierPath()
        text6Path.moveToPoint(CGPoint(x: 64.05, y: 3.85))
        text6Path.addLineToPoint(CGPoint(x: 64.05, y: 15.27))
        text6Path.addLineToPoint(CGPoint(x: 65.57, y: 15.27))
        text6Path.addLineToPoint(CGPoint(x: 65.57, y: 3.85))
        text6Path.addLineToPoint(CGPoint(x: 64.05, y: 3.85))
        text6Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text6Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text6Path.lineWidth = 1
        text6Path.stroke()


        //// Text 7 Drawing
        let text7Path = UIBezierPath()
        text7Path.moveToPoint(CGPoint(x: 68.94, y: 3.81))
        text7Path.addLineToPoint(CGPoint(x: 68.94, y: 15.23))
        text7Path.addLineToPoint(CGPoint(x: 70.38, y: 15.23))
        text7Path.addLineToPoint(CGPoint(x: 70.38, y: 6.06))
        text7Path.addLineToPoint(CGPoint(x: 70.41, y: 6.06))
        text7Path.addLineToPoint(CGPoint(x: 76.38, y: 15.23))
        text7Path.addLineToPoint(CGPoint(x: 78.04, y: 15.23))
        text7Path.addLineToPoint(CGPoint(x: 78.04, y: 3.81))
        text7Path.addLineToPoint(CGPoint(x: 76.6, y: 3.81))
        text7Path.addLineToPoint(CGPoint(x: 76.6, y: 13.07))
        text7Path.addLineToPoint(CGPoint(x: 76.57, y: 13.07))
        text7Path.addLineToPoint(CGPoint(x: 70.55, y: 3.81))
        text7Path.addLineToPoint(CGPoint(x: 68.94, y: 3.81))
        text7Path.closePath()
        DrudgeStyleKit.logoLines.setFill()
        text7Path.fill()
        DrudgeStyleKit.logoStroke.setStroke()
        text7Path.lineWidth = 1
        text7Path.stroke()
    }

    public class func drawCanvas1() {
    }

    public class func drawUpdateButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.314, green: 0.427, blue: 0.529, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 93, height: 27), cornerRadius: 8)
        color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 20.75, y: 3, width: 67.26, height: 21)
        let textTextContent = NSString(string: "Updates")
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect)
        textTextContent.drawInRect(CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 11, y: 20))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.addLineToPoint(CGPoint(x: 6.52, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 14.75, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.lineJoinStyle = .Round;

        UIColor.whiteColor().setFill()
        bezierPath.fill()
        UIColor.whiteColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    //// Generated Images

    public class var imageOfLogoLaunchIcon: UIImage {
        if Cache.imageOfLogoLaunchIcon != nil {
            return Cache.imageOfLogoLaunchIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
            DrudgeStyleKit.drawLogoLaunchIcon()

        Cache.imageOfLogoLaunchIcon = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfLogoLaunchIcon!
    }

    public class var imageOfLogoIcon: UIImage {
        if Cache.imageOfLogoIcon != nil {
            return Cache.imageOfLogoIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 29), false, 0)
            DrudgeStyleKit.drawLogoIcon()

        Cache.imageOfLogoIcon = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfLogoIcon!
    }

    public class var imageOfRefresh: UIImage {
        if Cache.imageOfRefresh != nil {
            return Cache.imageOfRefresh!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawRefresh()

        Cache.imageOfRefresh = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRefresh!
    }

    public class var imageOfPicture: UIImage {
        if Cache.imageOfPicture != nil {
            return Cache.imageOfPicture!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawPicture()

        Cache.imageOfPicture = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPicture!
    }

    public class var imageOfFilter: UIImage {
        if Cache.imageOfFilter != nil {
            return Cache.imageOfFilter!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            DrudgeStyleKit.drawFilter()

        Cache.imageOfFilter = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfFilter!
    }

    public class var imageOfNoFilter: UIImage {
        if Cache.imageOfNoFilter != nil {
            return Cache.imageOfNoFilter!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            DrudgeStyleKit.drawNoFilter()

        Cache.imageOfNoFilter = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNoFilter!
    }

    public class var imageOfMiniLogo: UIImage {
        if Cache.imageOfMiniLogo != nil {
            return Cache.imageOfMiniLogo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            DrudgeStyleKit.drawMiniLogo()

        Cache.imageOfMiniLogo = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMiniLogo!
    }

    public class var imageOfMiniLogo2: UIImage {
        if Cache.imageOfMiniLogo2 != nil {
            return Cache.imageOfMiniLogo2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 83, height: 21), false, 0)
            DrudgeStyleKit.drawMiniLogo2()

        Cache.imageOfMiniLogo2 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMiniLogo2!
    }

    //// Customization Infrastructure

    @IBOutlet var logoLaunchIconTargets: [AnyObject]! {
        get { return Cache.logoLaunchIconTargets }
        set {
            Cache.logoLaunchIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfLogoLaunchIcon)
            }
        }
    }

    @IBOutlet var logoIconTargets: [AnyObject]! {
        get { return Cache.logoIconTargets }
        set {
            Cache.logoIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfLogoIcon)
            }
        }
    }

    @IBOutlet var refreshTargets: [AnyObject]! {
        get { return Cache.refreshTargets }
        set {
            Cache.refreshTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfRefresh)
            }
        }
    }

    @IBOutlet var pictureTargets: [AnyObject]! {
        get { return Cache.pictureTargets }
        set {
            Cache.pictureTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfPicture)
            }
        }
    }

    @IBOutlet var filterTargets: [AnyObject]! {
        get { return Cache.filterTargets }
        set {
            Cache.filterTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfFilter)
            }
        }
    }

    @IBOutlet var noFilterTargets: [AnyObject]! {
        get { return Cache.noFilterTargets }
        set {
            Cache.noFilterTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfNoFilter)
            }
        }
    }

    @IBOutlet var miniLogoTargets: [AnyObject]! {
        get { return Cache.miniLogoTargets }
        set {
            Cache.miniLogoTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfMiniLogo)
            }
        }
    }

    @IBOutlet var miniLogo2Targets: [AnyObject]! {
        get { return Cache.miniLogo2Targets }
        set {
            Cache.miniLogo2Targets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfMiniLogo2)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
