//
//  DrudgeStyleKit.swift
//  Drudge
//
//  Created by Todd Isaacs on 6/18/16.
//  Copyright (c) 2016 Nerd Waller. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DrudgeStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let fUIBlue: UIColor = UIColor(red: 0.173, green: 0.243, blue: 0.314, alpha: 1.000)
        static let fUILight: UIColor = UIColor(red: 0.204, green: 0.596, blue: 0.859, alpha: 1.000)
        static let logoStroke: UIColor = DrudgeStyleKit.fUILight.colorWithAlpha(1)
        static let readArticle: UIColor = DrudgeStyleKit.fUIBlue.colorWithHighlight(0.4)
        static let unreadArticle: UIColor = DrudgeStyleKit.fUIBlue.colorWithShadow(0.1)
        static var imageOfRefresh: UIImage?
        static var refreshTargets: [AnyObject]?
        static var imageOfPicture: UIImage?
        static var pictureTargets: [AnyObject]?
        static var imageOfFilter: UIImage?
        static var filterTargets: [AnyObject]?
        static var imageOfNoFilter: UIImage?
        static var noFilterTargets: [AnyObject]?
        static var imageOfHeadline_icon: UIImage?
        static var headline_iconTargets: [AnyObject]?
        static var imageOfTop_story: UIImage?
        static var top_storyTargets: [AnyObject]?
        static var imageOfColumn: UIImage?
        static var columnTargets: [AnyObject]?
        static var imageOfDLogo: UIImage?
        static var dLogoTargets: [AnyObject]?
        static var imageOfDNavLogo: UIImage?
        static var dNavLogoTargets: [AnyObject]?
    }

    //// Colors

    public class var fUIBlue: UIColor { return Cache.fUIBlue }
    public class var fUILight: UIColor { return Cache.fUILight }
    public class var logoStroke: UIColor { return Cache.logoStroke }
    public class var readArticle: UIColor { return Cache.readArticle }
    public class var unreadArticle: UIColor { return Cache.unreadArticle }

    //// Drawing Methods

    public class func drawRefresh() {
        //// Color Declarations
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPoint(x: 31.09, y: 15))
        ovalPath.addCurveToPoint(CGPoint(x: 16.09, y: 30), controlPoint1: CGPoint(x: 22.81, y: 15), controlPoint2: CGPoint(x: 16.09, y: 21.72))
        ovalPath.addCurveToPoint(CGPoint(x: 31.09, y: 45), controlPoint1: CGPoint(x: 16.09, y: 38.28), controlPoint2: CGPoint(x: 22.81, y: 45))
        ovalPath.addCurveToPoint(CGPoint(x: 46.09, y: 30), controlPoint1: CGPoint(x: 39.37, y: 45), controlPoint2: CGPoint(x: 46.09, y: 38.28))
        fUIBBlue.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 30, y: 22.05))
        bezierPath.addLineToPoint(CGPoint(x: 41.25, y: 15.49))
        bezierPath.addLineToPoint(CGPoint(x: 30, y: 8))
        bezierPath.addLineToPoint(CGPoint(x: 30, y: 21.86))
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        fUIBBlue.setFill()
        bezierPath.fill()
        fUIBBlue.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawPicture() {
        //// Color Declarations
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2.19, y: 9.02, width: 56.06, height: 41.72), cornerRadius: 3)
        UIColor.whiteColor().setFill()
        rectanglePath.fill()
        fUIBBlue.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.addLineToPoint(CGPoint(x: 52.25, y: 44.51))
        bezierPath.addLineToPoint(CGPoint(x: 52.31, y: 28.71))
        bezierPath.addLineToPoint(CGPoint(x: 38.94, y: 17.25))
        bezierPath.addLineToPoint(CGPoint(x: 23.06, y: 32.19))
        bezierPath.addLineToPoint(CGPoint(x: 16.6, y: 27.32))
        bezierPath.addLineToPoint(CGPoint(x: 8.58, y: 36))
        bezierPath.addLineToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.closePath()
        UIColor.whiteColor().setFill()
        bezierPath.fill()
        fUIBBlue.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 8.52, y: 14.7, width: 7.22, height: 6.59))
        UIColor.whiteColor().setFill()
        ovalPath.fill()
        fUIBBlue.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    public class func drawFilter() {
        //// Color Declarations
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 2.39, y: 2.6))
        bezierPath.addLineToPoint(CGPoint(x: 22.55, y: 2.6))
        bezierPath.addLineToPoint(CGPoint(x: 14.48, y: 11.86))
        bezierPath.addLineToPoint(CGPoint(x: 14.51, y: 23.13))
        bezierPath.addLineToPoint(CGPoint(x: 10.5, y: 20.54))
        bezierPath.addLineToPoint(CGPoint(x: 10.45, y: 12.01))
        bezierPath.addLineToPoint(CGPoint(x: 2.39, y: 2.6))
        bezierPath.closePath()
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        fUIBBlue.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()
    }

    public class func drawNoFilter() {
        //// Color Declarations
        let fUIRed = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 23.92, y: 5.43))
        bezier4Path.addCurveToPoint(CGPoint(x: 19.61, y: 9.84), controlPoint1: CGPoint(x: 23.92, y: 7.86), controlPoint2: CGPoint(x: 21.99, y: 9.84))
        bezier4Path.addCurveToPoint(CGPoint(x: 17.02, y: 8.94), controlPoint1: CGPoint(x: 18.64, y: 9.84), controlPoint2: CGPoint(x: 17.74, y: 9.5))
        bezier4Path.addCurveToPoint(CGPoint(x: 14.48, y: 11.86), controlPoint1: CGPoint(x: 15.61, y: 10.56), controlPoint2: CGPoint(x: 14.48, y: 11.86))
        bezier4Path.addLineToPoint(CGPoint(x: 14.51, y: 23.13))
        bezier4Path.addLineToPoint(CGPoint(x: 10.5, y: 20.54))
        bezier4Path.addLineToPoint(CGPoint(x: 10.45, y: 12.01))
        bezier4Path.addLineToPoint(CGPoint(x: 2.39, y: 2.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 16.31, y: 2.6), controlPoint1: CGPoint(x: 2.39, y: 2.6), controlPoint2: CGPoint(x: 10.39, y: 2.6))
        bezier4Path.addCurveToPoint(CGPoint(x: 19.61, y: 1.03), controlPoint1: CGPoint(x: 17.1, y: 1.64), controlPoint2: CGPoint(x: 18.29, y: 1.03))
        bezier4Path.addCurveToPoint(CGPoint(x: 23.92, y: 5.43), controlPoint1: CGPoint(x: 21.99, y: 1.03), controlPoint2: CGPoint(x: 23.92, y: 3))
        bezier4Path.closePath()
        bezier4Path.lineJoinStyle = .Round;

        fUIBBlue.setStroke()
        bezier4Path.lineWidth = 2
        bezier4Path.stroke()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 21.54, y: 3.21))
        bezierPath.addCurveToPoint(CGPoint(x: 21.6, y: 3.96), controlPoint1: CGPoint(x: 21.77, y: 3.44), controlPoint2: CGPoint(x: 21.78, y: 3.76))
        bezierPath.addCurveToPoint(CGPoint(x: 20.37, y: 5.39), controlPoint1: CGPoint(x: 21.6, y: 3.96), controlPoint2: CGPoint(x: 20.67, y: 5.05))
        bezierPath.addCurveToPoint(CGPoint(x: 21.61, y: 6.78), controlPoint1: CGPoint(x: 21.03, y: 6.13), controlPoint2: CGPoint(x: 21.61, y: 6.78))
        bezierPath.addCurveToPoint(CGPoint(x: 21.6, y: 7.5), controlPoint1: CGPoint(x: 21.78, y: 6.98), controlPoint2: CGPoint(x: 21.78, y: 7.3))
        bezierPath.addCurveToPoint(CGPoint(x: 20.94, y: 7.49), controlPoint1: CGPoint(x: 21.41, y: 7.69), controlPoint2: CGPoint(x: 21.12, y: 7.69))
        bezierPath.addCurveToPoint(CGPoint(x: 19.74, y: 6.13), controlPoint1: CGPoint(x: 20.94, y: 7.49), controlPoint2: CGPoint(x: 20.38, y: 6.86))
        bezierPath.addCurveToPoint(CGPoint(x: 18.53, y: 7.54), controlPoint1: CGPoint(x: 19.23, y: 6.73), controlPoint2: CGPoint(x: 18.53, y: 7.54))
        bezierPath.addCurveToPoint(CGPoint(x: 17.88, y: 7.56), controlPoint1: CGPoint(x: 18.36, y: 7.74), controlPoint2: CGPoint(x: 18.06, y: 7.75))
        bezierPath.addCurveToPoint(CGPoint(x: 17.86, y: 6.84), controlPoint1: CGPoint(x: 17.69, y: 7.37), controlPoint2: CGPoint(x: 17.68, y: 7.05))
        bezierPath.addCurveToPoint(CGPoint(x: 19.1, y: 5.4), controlPoint1: CGPoint(x: 17.86, y: 6.84), controlPoint2: CGPoint(x: 18.69, y: 5.87))
        bezierPath.addCurveToPoint(CGPoint(x: 17.85, y: 3.99), controlPoint1: CGPoint(x: 18.43, y: 4.65), controlPoint2: CGPoint(x: 17.85, y: 3.99))
        bezierPath.addCurveToPoint(CGPoint(x: 17.86, y: 3.28), controlPoint1: CGPoint(x: 17.67, y: 3.79), controlPoint2: CGPoint(x: 17.68, y: 3.47))
        bezierPath.addCurveToPoint(CGPoint(x: 18.52, y: 3.29), controlPoint1: CGPoint(x: 18.06, y: 3.08), controlPoint2: CGPoint(x: 18.34, y: 3.1))
        bezierPath.addCurveToPoint(CGPoint(x: 19.73, y: 4.66), controlPoint1: CGPoint(x: 18.52, y: 3.29), controlPoint2: CGPoint(x: 19.08, y: 3.93))
        bezierPath.addCurveToPoint(CGPoint(x: 20.93, y: 3.27), controlPoint1: CGPoint(x: 20.05, y: 4.29), controlPoint2: CGPoint(x: 20.93, y: 3.27))
        bezierPath.addCurveToPoint(CGPoint(x: 21.58, y: 3.25), controlPoint1: CGPoint(x: 21.1, y: 3.07), controlPoint2: CGPoint(x: 21.39, y: 3.06))
        bezierPath.addLineToPoint(CGPoint(x: 21.54, y: 3.21))
        bezierPath.closePath()
        fUIRed.setFill()
        bezierPath.fill()
    }

    public class func drawHeadline_icon() {
        //// Color Declarations
        let fUIRed = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3.71, y: 2.02, width: 12.62, height: 15.83), cornerRadius: 1)
        fUIBBlue.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 6, y: 4.25, width: 8, height: 7.66))
        fUIBBlue.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 5.58, y: 14.07))
        bezier4Path.addLineToPoint(CGPoint(x: 14.55, y: 14.03))
        fUIBBlue.setStroke()
        bezier4Path.lineWidth = 0.5
        bezier4Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 5.64, y: 15.91))
        bezier3Path.addLineToPoint(CGPoint(x: 14.61, y: 15.87))
        fUIBBlue.setStroke()
        bezier3Path.lineWidth = 0.5
        bezier3Path.stroke()


        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPoint(x: 10.03, y: 6.19))
        starPath.addLineToPoint(CGPoint(x: 10.49, y: 7.56))
        starPath.addLineToPoint(CGPoint(x: 11.93, y: 7.57))
        starPath.addLineToPoint(CGPoint(x: 10.77, y: 8.43))
        starPath.addLineToPoint(CGPoint(x: 11.2, y: 9.81))
        starPath.addLineToPoint(CGPoint(x: 10.03, y: 8.97))
        starPath.addLineToPoint(CGPoint(x: 8.85, y: 9.81))
        starPath.addLineToPoint(CGPoint(x: 9.28, y: 8.43))
        starPath.addLineToPoint(CGPoint(x: 8.12, y: 7.57))
        starPath.addLineToPoint(CGPoint(x: 9.57, y: 7.56))
        starPath.closePath()
        fUIRed.setFill()
        starPath.fill()
        fUIRed.setStroke()
        starPath.lineWidth = 1
        starPath.stroke()
    }

    public class func drawTop_story() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3.71, y: 2.02, width: 12.62, height: 15.83), cornerRadius: 1)
        DrudgeStyleKit.fUILight.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 5.62, y: 10.5))
        bezierPath.addLineToPoint(CGPoint(x: 14.59, y: 10.45))
        DrudgeStyleKit.fUILight.setStroke()
        bezierPath.lineWidth = 0.5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 5.63, y: 12.16))
        bezier2Path.addLineToPoint(CGPoint(x: 14.6, y: 12.11))
        DrudgeStyleKit.fUILight.setStroke()
        bezier2Path.lineWidth = 0.5
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 5.58, y: 14.07))
        bezier4Path.addLineToPoint(CGPoint(x: 14.55, y: 14.03))
        DrudgeStyleKit.fUILight.setStroke()
        bezier4Path.lineWidth = 0.5
        bezier4Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 5.64, y: 15.91))
        bezier3Path.addLineToPoint(CGPoint(x: 14.61, y: 15.87))
        DrudgeStyleKit.fUILight.setStroke()
        bezier3Path.lineWidth = 0.5
        bezier3Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 5.65, y: 5.23))
        bezier5Path.addLineToPoint(CGPoint(x: 14.61, y: 5.18))
        DrudgeStyleKit.fUILight.setStroke()
        bezier5Path.lineWidth = 0.5
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 5.65, y: 6.89))
        bezier6Path.addLineToPoint(CGPoint(x: 14.62, y: 6.84))
        DrudgeStyleKit.fUILight.setStroke()
        bezier6Path.lineWidth = 0.5
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: 5.6, y: 8.8))
        bezier7Path.addLineToPoint(CGPoint(x: 14.57, y: 8.75))
        DrudgeStyleKit.fUILight.setStroke()
        bezier7Path.lineWidth = 0.5
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        DrudgeStyleKit.fUILight.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.moveToPoint(CGPoint(x: 9.07, y: 16.15))
        bezier9Path.addLineToPoint(CGPoint(x: 9.07, y: 8.97))
        bezier9Path.addLineToPoint(CGPoint(x: 5.83, y: 8.97))
        bezier9Path.addLineToPoint(CGPoint(x: 10.23, y: 4.03))
        bezier9Path.addLineToPoint(CGPoint(x: 14.86, y: 8.97))
        bezier9Path.addLineToPoint(CGPoint(x: 11.62, y: 8.97))
        bezier9Path.addLineToPoint(CGPoint(x: 11.62, y: 16.15))
        bezier9Path.addLineToPoint(CGPoint(x: 9.07, y: 16.15))
        bezier9Path.closePath()
        bezier9Path.lineJoinStyle = .Round;

        DrudgeStyleKit.fUILight.setFill()
        bezier9Path.fill()
        DrudgeStyleKit.fUILight.setStroke()
        bezier9Path.lineWidth = 0.5
        bezier9Path.stroke()
    }

    public class func drawColumn() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3.71, y: 2.02, width: 12.62, height: 15.83), cornerRadius: 1)
        DrudgeStyleKit.fUILight.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 6, y: 4.5, width: 3, height: 11))
        DrudgeStyleKit.fUILight.setFill()
        rectangle2Path.fill()
        DrudgeStyleKit.fUILight.setStroke()
        rectangle2Path.lineWidth = 0.5
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 11, y: 4.5, width: 3, height: 11))
        DrudgeStyleKit.fUILight.setFill()
        rectangle3Path.fill()
        DrudgeStyleKit.fUILight.setStroke()
        rectangle3Path.lineWidth = 0.5
        rectangle3Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        DrudgeStyleKit.fUILight.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.stroke()
    }

    public class func drawDLogo() {
        //// Color Declarations
        let fUIWhite = UIColor(red: 0.983, green: 0.982, blue: 0.992, alpha: 1.000)
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0.34, y: 1, width: 513.29, height: 510.85))
        fUIBBlue.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.moveToPoint(CGPoint(x: 94.07, y: 452.73))
        textPath.addLineToPoint(CGPoint(x: 94.07, y: 59.76))
        textPath.addLineToPoint(CGPoint(x: 263.21, y: 59.76))
        textPath.addCurveToPoint(CGPoint(x: 403.14, y: 108.22), controlPoint1: CGPoint(x: 324.1, y: 59.76), controlPoint2: CGPoint(x: 370.75, y: 75.91))
        textPath.addCurveToPoint(CGPoint(x: 451.73, y: 248.01), controlPoint1: CGPoint(x: 435.54, y: 140.52), controlPoint2: CGPoint(x: 451.73, y: 187.12))
        textPath.addCurveToPoint(CGPoint(x: 400.22, y: 398.96), controlPoint1: CGPoint(x: 451.73, y: 312.8), controlPoint2: CGPoint(x: 434.56, y: 363.12))
        textPath.addCurveToPoint(CGPoint(x: 256.04, y: 452.73), controlPoint1: CGPoint(x: 365.88, y: 434.81), controlPoint2: CGPoint(x: 317.82, y: 452.73))
        textPath.addLineToPoint(CGPoint(x: 94.07, y: 452.73))
        textPath.closePath()
        textPath.moveToPoint(CGPoint(x: 175.85, y: 396.97))
        textPath.addLineToPoint(CGPoint(x: 236.92, y: 396.97))
        textPath.addCurveToPoint(CGPoint(x: 333.18, y: 361.26), controlPoint1: CGPoint(x: 279.94, y: 396.97), controlPoint2: CGPoint(x: 312.02, y: 385.07))
        textPath.addCurveToPoint(CGPoint(x: 364.91, y: 252.79), controlPoint1: CGPoint(x: 354.33, y: 337.45), controlPoint2: CGPoint(x: 364.91, y: 301.29))
        textPath.addCurveToPoint(CGPoint(x: 339.42, y: 159.06), controlPoint1: CGPoint(x: 364.91, y: 215.27), controlPoint2: CGPoint(x: 356.41, y: 184.02))
        textPath.addCurveToPoint(CGPoint(x: 297.2, y: 123.48), controlPoint1: CGPoint(x: 327.73, y: 141.89), controlPoint2: CGPoint(x: 313.66, y: 130.03))
        textPath.addCurveToPoint(CGPoint(x: 225.24, y: 113.66), controlPoint1: CGPoint(x: 280.74, y: 116.93), controlPoint2: CGPoint(x: 256.75, y: 113.66))
        textPath.addLineToPoint(CGPoint(x: 175.85, y: 113.66))
        textPath.addLineToPoint(CGPoint(x: 175.85, y: 396.97))
        textPath.closePath()
        fUIWhite.setFill()
        textPath.fill()
        fUIWhite.setStroke()
        textPath.lineWidth = 8
        textPath.stroke()
    }

    public class func drawUpdateButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fUIGrey = UIColor(red: 0.314, green: 0.427, blue: 0.529, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 93, height: 27), cornerRadius: 8)
        fUIGrey.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 20.75, y: 3, width: 67.26, height: 21)
        let textPath = UIBezierPath(rect: textRect)
        fUIGrey.setFill()
        textPath.fill()
        let textTextContent = NSString(string: "Updates")
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect)
        textTextContent.drawInRect(CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 11, y: 20))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.addLineToPoint(CGPoint(x: 6.52, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 14.75, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.lineJoinStyle = .Round;

        UIColor.whiteColor().setFill()
        bezierPath.fill()
        UIColor.whiteColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawDNavLogo() {
        //// Color Declarations
        let fUIWhite = UIColor(red: 0.983, green: 0.982, blue: 0.992, alpha: 1.000)
        let fUIBBlue = UIColor(red: 0.161, green: 0.502, blue: 0.725, alpha: 1.000)

        //// Text 3 Drawing
        let text3Path = UIBezierPath()
        text3Path.moveToPoint(CGPoint(x: 12.04, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 12.04, y: 3.95))
        text3Path.addLineToPoint(CGPoint(x: 17.5, y: 3.95))
        text3Path.addCurveToPoint(CGPoint(x: 22.01, y: 5.83), controlPoint1: CGPoint(x: 19.46, y: 3.95), controlPoint2: CGPoint(x: 20.97, y: 4.58))
        text3Path.addCurveToPoint(CGPoint(x: 23.58, y: 11.25), controlPoint1: CGPoint(x: 23.06, y: 7.08), controlPoint2: CGPoint(x: 23.58, y: 8.89))
        text3Path.addCurveToPoint(CGPoint(x: 21.92, y: 17.11), controlPoint1: CGPoint(x: 23.58, y: 13.77), controlPoint2: CGPoint(x: 23.03, y: 15.72))
        text3Path.addCurveToPoint(CGPoint(x: 17.27, y: 19.2), controlPoint1: CGPoint(x: 20.81, y: 18.5), controlPoint2: CGPoint(x: 19.26, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 12.04, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 14.68, y: 17.03))
        text3Path.addLineToPoint(CGPoint(x: 16.65, y: 17.03))
        text3Path.addCurveToPoint(CGPoint(x: 19.76, y: 15.65), controlPoint1: CGPoint(x: 18.04, y: 17.03), controlPoint2: CGPoint(x: 19.07, y: 16.57))
        text3Path.addCurveToPoint(CGPoint(x: 20.78, y: 11.44), controlPoint1: CGPoint(x: 20.44, y: 14.72), controlPoint2: CGPoint(x: 20.78, y: 13.32))
        text3Path.addCurveToPoint(CGPoint(x: 19.96, y: 7.8), controlPoint1: CGPoint(x: 20.78, y: 9.98), controlPoint2: CGPoint(x: 20.51, y: 8.77))
        text3Path.addCurveToPoint(CGPoint(x: 18.6, y: 6.42), controlPoint1: CGPoint(x: 19.58, y: 7.14), controlPoint2: CGPoint(x: 19.13, y: 6.68))
        text3Path.addCurveToPoint(CGPoint(x: 16.28, y: 6.04), controlPoint1: CGPoint(x: 18.07, y: 6.17), controlPoint2: CGPoint(x: 17.29, y: 6.04))
        text3Path.addLineToPoint(CGPoint(x: 14.68, y: 6.04))
        text3Path.addLineToPoint(CGPoint(x: 14.68, y: 17.03))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 25.95, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 25.95, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 28.49, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 28.49, y: 10.02))
        text3Path.addCurveToPoint(CGPoint(x: 31.49, y: 7.63), controlPoint1: CGPoint(x: 29.14, y: 8.42), controlPoint2: CGPoint(x: 30.14, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 31.96, y: 7.69), controlPoint1: CGPoint(x: 31.65, y: 7.63), controlPoint2: CGPoint(x: 31.8, y: 7.65))
        text3Path.addLineToPoint(CGPoint(x: 31.96, y: 10.41))
        text3Path.addCurveToPoint(CGPoint(x: 30.95, y: 10.17), controlPoint1: CGPoint(x: 31.6, y: 10.25), controlPoint2: CGPoint(x: 31.26, y: 10.17))
        text3Path.addCurveToPoint(CGPoint(x: 28.49, y: 12.02), controlPoint1: CGPoint(x: 29.94, y: 10.17), controlPoint2: CGPoint(x: 29.12, y: 10.79))
        text3Path.addLineToPoint(CGPoint(x: 28.49, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 25.95, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 39.74, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 39.74, y: 17.07))
        text3Path.addCurveToPoint(CGPoint(x: 36.54, y: 19.46), controlPoint1: CGPoint(x: 38.92, y: 18.66), controlPoint2: CGPoint(x: 37.85, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 34.55, y: 18.5), controlPoint1: CGPoint(x: 35.7, y: 19.46), controlPoint2: CGPoint(x: 35.04, y: 19.14))
        text3Path.addCurveToPoint(CGPoint(x: 33.82, y: 15.88), controlPoint1: CGPoint(x: 34.07, y: 17.86), controlPoint2: CGPoint(x: 33.82, y: 16.99))
        text3Path.addLineToPoint(CGPoint(x: 33.82, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 36.36, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 36.36, y: 15.13))
        text3Path.addCurveToPoint(CGPoint(x: 37.43, y: 17.05), controlPoint1: CGPoint(x: 36.36, y: 16.41), controlPoint2: CGPoint(x: 36.72, y: 17.05))
        text3Path.addCurveToPoint(CGPoint(x: 39.74, y: 15), controlPoint1: CGPoint(x: 38.23, y: 17.05), controlPoint2: CGPoint(x: 39, y: 16.37))
        text3Path.addLineToPoint(CGPoint(x: 39.74, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 42.28, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 42.28, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 39.74, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 51.36, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 51.36, y: 17.07))
        text3Path.addCurveToPoint(CGPoint(x: 48.29, y: 19.46), controlPoint1: CGPoint(x: 50.71, y: 18.66), controlPoint2: CGPoint(x: 49.69, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 45.63, y: 17.96), controlPoint1: CGPoint(x: 47.16, y: 19.46), controlPoint2: CGPoint(x: 46.27, y: 18.96))
        text3Path.addCurveToPoint(CGPoint(x: 44.66, y: 13.85), controlPoint1: CGPoint(x: 44.98, y: 16.97), controlPoint2: CGPoint(x: 44.66, y: 15.6))
        text3Path.addCurveToPoint(CGPoint(x: 45.75, y: 9.32), controlPoint1: CGPoint(x: 44.66, y: 11.95), controlPoint2: CGPoint(x: 45.02, y: 10.44))
        text3Path.addCurveToPoint(CGPoint(x: 48.68, y: 7.63), controlPoint1: CGPoint(x: 46.48, y: 8.19), controlPoint2: CGPoint(x: 47.45, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 51.36, y: 9.03), controlPoint1: CGPoint(x: 49.66, y: 7.63), controlPoint2: CGPoint(x: 50.56, y: 8.09))
        text3Path.addLineToPoint(CGPoint(x: 51.36, y: 2.93))
        text3Path.addLineToPoint(CGPoint(x: 53.91, y: 2.93))
        text3Path.addLineToPoint(CGPoint(x: 53.91, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 51.36, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 51.36, y: 10.84))
        text3Path.addCurveToPoint(CGPoint(x: 49.4, y: 9.61), controlPoint1: CGPoint(x: 50.75, y: 10.02), controlPoint2: CGPoint(x: 50.1, y: 9.61))
        text3Path.addCurveToPoint(CGPoint(x: 47.91, y: 10.69), controlPoint1: CGPoint(x: 48.78, y: 9.61), controlPoint2: CGPoint(x: 48.28, y: 9.97))
        text3Path.addCurveToPoint(CGPoint(x: 47.36, y: 13.59), controlPoint1: CGPoint(x: 47.54, y: 11.41), controlPoint2: CGPoint(x: 47.36, y: 12.38))
        text3Path.addCurveToPoint(CGPoint(x: 49.2, y: 17.07), controlPoint1: CGPoint(x: 47.36, y: 15.91), controlPoint2: CGPoint(x: 47.97, y: 17.07))
        text3Path.addCurveToPoint(CGPoint(x: 51.36, y: 15.32), controlPoint1: CGPoint(x: 49.96, y: 17.07), controlPoint2: CGPoint(x: 50.68, y: 16.48))
        text3Path.addLineToPoint(CGPoint(x: 51.36, y: 10.84))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 57.14, y: 22.71))
        text3Path.addLineToPoint(CGPoint(x: 57.34, y: 20.5))
        text3Path.addCurveToPoint(CGPoint(x: 60.33, y: 21.36), controlPoint1: CGPoint(x: 58.39, y: 21.07), controlPoint2: CGPoint(x: 59.38, y: 21.36))
        text3Path.addCurveToPoint(CGPoint(x: 62.36, y: 20.64), controlPoint1: CGPoint(x: 61.27, y: 21.36), controlPoint2: CGPoint(x: 61.94, y: 21.12))
        text3Path.addCurveToPoint(CGPoint(x: 62.98, y: 18.3), controlPoint1: CGPoint(x: 62.78, y: 20.16), controlPoint2: CGPoint(x: 62.98, y: 19.38))
        text3Path.addLineToPoint(CGPoint(x: 62.98, y: 16.76))
        text3Path.addCurveToPoint(CGPoint(x: 59.93, y: 19.2), controlPoint1: CGPoint(x: 62.37, y: 18.38), controlPoint2: CGPoint(x: 61.35, y: 19.2))
        text3Path.addCurveToPoint(CGPoint(x: 57.26, y: 17.69), controlPoint1: CGPoint(x: 58.81, y: 19.2), controlPoint2: CGPoint(x: 57.92, y: 18.69))
        text3Path.addCurveToPoint(CGPoint(x: 56.28, y: 13.6), controlPoint1: CGPoint(x: 56.61, y: 16.68), controlPoint2: CGPoint(x: 56.28, y: 15.32))
        text3Path.addCurveToPoint(CGPoint(x: 57.38, y: 9.26), controlPoint1: CGPoint(x: 56.28, y: 11.8), controlPoint2: CGPoint(x: 56.65, y: 10.35))
        text3Path.addCurveToPoint(CGPoint(x: 60.32, y: 7.63), controlPoint1: CGPoint(x: 58.12, y: 8.17), controlPoint2: CGPoint(x: 59.1, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 62.98, y: 9.03), controlPoint1: CGPoint(x: 61.28, y: 7.63), controlPoint2: CGPoint(x: 62.17, y: 8.09))
        text3Path.addLineToPoint(CGPoint(x: 63.25, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 65.53, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 65.53, y: 16.52))
        text3Path.addCurveToPoint(CGPoint(x: 65.27, y: 20.25), controlPoint1: CGPoint(x: 65.53, y: 18.24), controlPoint2: CGPoint(x: 65.44, y: 19.49))
        text3Path.addCurveToPoint(CGPoint(x: 64.25, y: 22.2), controlPoint1: CGPoint(x: 65.09, y: 21.01), controlPoint2: CGPoint(x: 64.75, y: 21.66))
        text3Path.addCurveToPoint(CGPoint(x: 60.68, y: 23.51), controlPoint1: CGPoint(x: 63.41, y: 23.08), controlPoint2: CGPoint(x: 62.22, y: 23.51))
        text3Path.addCurveToPoint(CGPoint(x: 57.14, y: 22.71), controlPoint1: CGPoint(x: 59.59, y: 23.51), controlPoint2: CGPoint(x: 58.41, y: 23.25))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 62.98, y: 14.98))
        text3Path.addLineToPoint(CGPoint(x: 62.98, y: 10.81))
        text3Path.addCurveToPoint(CGPoint(x: 61.07, y: 9.56), controlPoint1: CGPoint(x: 62.37, y: 9.98), controlPoint2: CGPoint(x: 61.73, y: 9.56))
        text3Path.addCurveToPoint(CGPoint(x: 59.54, y: 10.62), controlPoint1: CGPoint(x: 60.43, y: 9.56), controlPoint2: CGPoint(x: 59.92, y: 9.91))
        text3Path.addCurveToPoint(CGPoint(x: 58.98, y: 13.44), controlPoint1: CGPoint(x: 59.17, y: 11.32), controlPoint2: CGPoint(x: 58.98, y: 12.26))
        text3Path.addCurveToPoint(CGPoint(x: 60.75, y: 16.76), controlPoint1: CGPoint(x: 58.98, y: 15.65), controlPoint2: CGPoint(x: 59.57, y: 16.76))
        text3Path.addCurveToPoint(CGPoint(x: 62.98, y: 14.98), controlPoint1: CGPoint(x: 61.57, y: 16.76), controlPoint2: CGPoint(x: 62.31, y: 16.17))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 76.29, y: 18.82))
        text3Path.addCurveToPoint(CGPoint(x: 72.87, y: 19.46), controlPoint1: CGPoint(x: 75.09, y: 19.24), controlPoint2: CGPoint(x: 73.95, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 69.15, y: 17.85), controlPoint1: CGPoint(x: 71.3, y: 19.46), controlPoint2: CGPoint(x: 70.06, y: 18.92))
        text3Path.addCurveToPoint(CGPoint(x: 67.79, y: 13.46), controlPoint1: CGPoint(x: 68.24, y: 16.78), controlPoint2: CGPoint(x: 67.79, y: 15.31))
        text3Path.addCurveToPoint(CGPoint(x: 69.04, y: 9.23), controlPoint1: CGPoint(x: 67.79, y: 11.71), controlPoint2: CGPoint(x: 68.2, y: 10.3))
        text3Path.addCurveToPoint(CGPoint(x: 72.33, y: 7.63), controlPoint1: CGPoint(x: 69.87, y: 8.16), controlPoint2: CGPoint(x: 70.96, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 75.34, y: 9.19), controlPoint1: CGPoint(x: 73.7, y: 7.63), controlPoint2: CGPoint(x: 74.71, y: 8.15))
        text3Path.addCurveToPoint(CGPoint(x: 76.29, y: 14.15), controlPoint1: CGPoint(x: 75.98, y: 10.24), controlPoint2: CGPoint(x: 76.29, y: 11.89))
        text3Path.addLineToPoint(CGPoint(x: 70.46, y: 14.15))
        text3Path.addCurveToPoint(CGPoint(x: 73.42, y: 17.38), controlPoint1: CGPoint(x: 70.63, y: 16.31), controlPoint2: CGPoint(x: 71.62, y: 17.38))
        text3Path.addCurveToPoint(CGPoint(x: 76.29, y: 16.67), controlPoint1: CGPoint(x: 74.27, y: 17.38), controlPoint2: CGPoint(x: 75.23, y: 17.15))
        text3Path.addLineToPoint(CGPoint(x: 76.29, y: 18.82))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 70.43, y: 12.43))
        text3Path.addLineToPoint(CGPoint(x: 73.8, y: 12.43))
        text3Path.addCurveToPoint(CGPoint(x: 72.25, y: 9.53), controlPoint1: CGPoint(x: 73.8, y: 10.5), controlPoint2: CGPoint(x: 73.28, y: 9.53))
        text3Path.addCurveToPoint(CGPoint(x: 70.43, y: 12.43), controlPoint1: CGPoint(x: 71.2, y: 9.53), controlPoint2: CGPoint(x: 70.59, y: 10.5))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 81.51, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 81.51, y: 3.95))
        text3Path.addLineToPoint(CGPoint(x: 86.25, y: 3.95))
        text3Path.addCurveToPoint(CGPoint(x: 90.12, y: 7.73), controlPoint1: CGPoint(x: 88.83, y: 3.95), controlPoint2: CGPoint(x: 90.12, y: 5.21))
        text3Path.addCurveToPoint(CGPoint(x: 89.46, y: 10.3), controlPoint1: CGPoint(x: 90.12, y: 8.67), controlPoint2: CGPoint(x: 89.9, y: 9.53))
        text3Path.addCurveToPoint(CGPoint(x: 87.66, y: 12.08), controlPoint1: CGPoint(x: 89.02, y: 11.07), controlPoint2: CGPoint(x: 88.42, y: 11.67))
        text3Path.addLineToPoint(CGPoint(x: 91.8, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 88.59, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 85.45, y: 12.96))
        text3Path.addLineToPoint(CGPoint(x: 83.99, y: 12.96))
        text3Path.addLineToPoint(CGPoint(x: 83.99, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 81.51, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 83.99, y: 10.87))
        text3Path.addLineToPoint(CGPoint(x: 84.6, y: 10.87))
        text3Path.addCurveToPoint(CGPoint(x: 87.47, y: 8.08), controlPoint1: CGPoint(x: 86.51, y: 10.87), controlPoint2: CGPoint(x: 87.47, y: 9.94))
        text3Path.addCurveToPoint(CGPoint(x: 84.91, y: 6.04), controlPoint1: CGPoint(x: 87.47, y: 6.72), controlPoint2: CGPoint(x: 86.62, y: 6.04))
        text3Path.addLineToPoint(CGPoint(x: 83.99, y: 6.04))
        text3Path.addLineToPoint(CGPoint(x: 83.99, y: 10.87))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 101.27, y: 18.82))
        text3Path.addCurveToPoint(CGPoint(x: 97.84, y: 19.46), controlPoint1: CGPoint(x: 100.06, y: 19.24), controlPoint2: CGPoint(x: 98.92, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 94.12, y: 17.85), controlPoint1: CGPoint(x: 96.27, y: 19.46), controlPoint2: CGPoint(x: 95.03, y: 18.92))
        text3Path.addCurveToPoint(CGPoint(x: 92.76, y: 13.46), controlPoint1: CGPoint(x: 93.22, y: 16.78), controlPoint2: CGPoint(x: 92.76, y: 15.31))
        text3Path.addCurveToPoint(CGPoint(x: 94.01, y: 9.23), controlPoint1: CGPoint(x: 92.76, y: 11.71), controlPoint2: CGPoint(x: 93.18, y: 10.3))
        text3Path.addCurveToPoint(CGPoint(x: 97.3, y: 7.63), controlPoint1: CGPoint(x: 94.84, y: 8.16), controlPoint2: CGPoint(x: 95.94, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 100.32, y: 9.19), controlPoint1: CGPoint(x: 98.68, y: 7.63), controlPoint2: CGPoint(x: 99.68, y: 8.15))
        text3Path.addCurveToPoint(CGPoint(x: 101.27, y: 14.15), controlPoint1: CGPoint(x: 100.95, y: 10.24), controlPoint2: CGPoint(x: 101.27, y: 11.89))
        text3Path.addLineToPoint(CGPoint(x: 95.43, y: 14.15))
        text3Path.addCurveToPoint(CGPoint(x: 98.39, y: 17.38), controlPoint1: CGPoint(x: 95.61, y: 16.31), controlPoint2: CGPoint(x: 96.59, y: 17.38))
        text3Path.addCurveToPoint(CGPoint(x: 101.27, y: 16.67), controlPoint1: CGPoint(x: 99.24, y: 17.38), controlPoint2: CGPoint(x: 100.2, y: 17.15))
        text3Path.addLineToPoint(CGPoint(x: 101.27, y: 18.82))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 95.4, y: 12.43))
        text3Path.addLineToPoint(CGPoint(x: 98.77, y: 12.43))
        text3Path.addCurveToPoint(CGPoint(x: 97.22, y: 9.53), controlPoint1: CGPoint(x: 98.77, y: 10.5), controlPoint2: CGPoint(x: 98.26, y: 9.53))
        text3Path.addCurveToPoint(CGPoint(x: 95.4, y: 12.43), controlPoint1: CGPoint(x: 96.17, y: 9.53), controlPoint2: CGPoint(x: 95.57, y: 10.5))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 108.49, y: 17.98))
        text3Path.addCurveToPoint(CGPoint(x: 105.78, y: 19.46), controlPoint1: CGPoint(x: 107.65, y: 18.96), controlPoint2: CGPoint(x: 106.74, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 103.78, y: 18.55), controlPoint1: CGPoint(x: 104.96, y: 19.46), controlPoint2: CGPoint(x: 104.29, y: 19.15))
        text3Path.addCurveToPoint(CGPoint(x: 103.01, y: 16.2), controlPoint1: CGPoint(x: 103.26, y: 17.94), controlPoint2: CGPoint(x: 103.01, y: 17.16))
        text3Path.addCurveToPoint(CGPoint(x: 104.25, y: 13.31), controlPoint1: CGPoint(x: 103.01, y: 14.95), controlPoint2: CGPoint(x: 103.42, y: 13.99))
        text3Path.addCurveToPoint(CGPoint(x: 107.82, y: 12.29), controlPoint1: CGPoint(x: 105.08, y: 12.63), controlPoint2: CGPoint(x: 106.27, y: 12.29))
        text3Path.addLineToPoint(CGPoint(x: 108.49, y: 12.29))
        text3Path.addLineToPoint(CGPoint(x: 108.49, y: 11.26))
        text3Path.addCurveToPoint(CGPoint(x: 106.82, y: 9.5), controlPoint1: CGPoint(x: 108.49, y: 10.09), controlPoint2: CGPoint(x: 107.94, y: 9.5))
        text3Path.addCurveToPoint(CGPoint(x: 103.83, y: 10.51), controlPoint1: CGPoint(x: 105.84, y: 9.5), controlPoint2: CGPoint(x: 104.84, y: 9.84))
        text3Path.addLineToPoint(CGPoint(x: 103.83, y: 8.41))
        text3Path.addCurveToPoint(CGPoint(x: 107.24, y: 7.63), controlPoint1: CGPoint(x: 104.97, y: 7.89), controlPoint2: CGPoint(x: 106.11, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 110.93, y: 11.16), controlPoint1: CGPoint(x: 109.7, y: 7.63), controlPoint2: CGPoint(x: 110.93, y: 8.81))
        text3Path.addLineToPoint(CGPoint(x: 110.93, y: 16.17))
        text3Path.addCurveToPoint(CGPoint(x: 111.64, y: 17.5), controlPoint1: CGPoint(x: 110.93, y: 17.05), controlPoint2: CGPoint(x: 111.16, y: 17.5))
        text3Path.addCurveToPoint(CGPoint(x: 111.97, y: 17.46), controlPoint1: CGPoint(x: 111.72, y: 17.5), controlPoint2: CGPoint(x: 111.83, y: 17.48))
        text3Path.addLineToPoint(CGPoint(x: 112.03, y: 19.17))
        text3Path.addCurveToPoint(CGPoint(x: 110.61, y: 19.46), controlPoint1: CGPoint(x: 111.5, y: 19.36), controlPoint2: CGPoint(x: 111.02, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 108.61, y: 17.98), controlPoint1: CGPoint(x: 109.57, y: 19.46), controlPoint2: CGPoint(x: 108.9, y: 18.96))
        text3Path.addLineToPoint(CGPoint(x: 108.49, y: 17.98))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 108.49, y: 16.34))
        text3Path.addLineToPoint(CGPoint(x: 108.49, y: 14.05))
        text3Path.addLineToPoint(CGPoint(x: 107.9, y: 14.05))
        text3Path.addCurveToPoint(CGPoint(x: 105.44, y: 15.9), controlPoint1: CGPoint(x: 106.26, y: 14.05), controlPoint2: CGPoint(x: 105.44, y: 14.66))
        text3Path.addCurveToPoint(CGPoint(x: 105.79, y: 16.96), controlPoint1: CGPoint(x: 105.44, y: 16.32), controlPoint2: CGPoint(x: 105.56, y: 16.67))
        text3Path.addCurveToPoint(CGPoint(x: 106.67, y: 17.38), controlPoint1: CGPoint(x: 106.03, y: 17.24), controlPoint2: CGPoint(x: 106.32, y: 17.38))
        text3Path.addCurveToPoint(CGPoint(x: 108.49, y: 16.34), controlPoint1: CGPoint(x: 107.26, y: 17.38), controlPoint2: CGPoint(x: 107.87, y: 17.04))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 120.12, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 120.12, y: 17.07))
        text3Path.addCurveToPoint(CGPoint(x: 117.04, y: 19.46), controlPoint1: CGPoint(x: 119.47, y: 18.66), controlPoint2: CGPoint(x: 118.44, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 114.38, y: 17.96), controlPoint1: CGPoint(x: 115.91, y: 19.46), controlPoint2: CGPoint(x: 115.02, y: 18.96))
        text3Path.addCurveToPoint(CGPoint(x: 113.41, y: 13.85), controlPoint1: CGPoint(x: 113.73, y: 16.97), controlPoint2: CGPoint(x: 113.41, y: 15.6))
        text3Path.addCurveToPoint(CGPoint(x: 114.5, y: 9.32), controlPoint1: CGPoint(x: 113.41, y: 11.95), controlPoint2: CGPoint(x: 113.77, y: 10.44))
        text3Path.addCurveToPoint(CGPoint(x: 117.44, y: 7.63), controlPoint1: CGPoint(x: 115.23, y: 8.19), controlPoint2: CGPoint(x: 116.21, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 120.12, y: 9.03), controlPoint1: CGPoint(x: 118.42, y: 7.63), controlPoint2: CGPoint(x: 119.31, y: 8.09))
        text3Path.addLineToPoint(CGPoint(x: 120.12, y: 2.93))
        text3Path.addLineToPoint(CGPoint(x: 122.66, y: 2.93))
        text3Path.addLineToPoint(CGPoint(x: 122.66, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 120.12, y: 19.2))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 120.12, y: 10.84))
        text3Path.addCurveToPoint(CGPoint(x: 118.16, y: 9.61), controlPoint1: CGPoint(x: 119.51, y: 10.02), controlPoint2: CGPoint(x: 118.85, y: 9.61))
        text3Path.addCurveToPoint(CGPoint(x: 116.66, y: 10.69), controlPoint1: CGPoint(x: 117.53, y: 9.61), controlPoint2: CGPoint(x: 117.04, y: 9.97))
        text3Path.addCurveToPoint(CGPoint(x: 116.11, y: 13.59), controlPoint1: CGPoint(x: 116.29, y: 11.41), controlPoint2: CGPoint(x: 116.11, y: 12.38))
        text3Path.addCurveToPoint(CGPoint(x: 117.96, y: 17.07), controlPoint1: CGPoint(x: 116.11, y: 15.91), controlPoint2: CGPoint(x: 116.72, y: 17.07))
        text3Path.addCurveToPoint(CGPoint(x: 120.12, y: 15.32), controlPoint1: CGPoint(x: 118.71, y: 17.07), controlPoint2: CGPoint(x: 119.43, y: 16.48))
        text3Path.addLineToPoint(CGPoint(x: 120.12, y: 10.84))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 133.48, y: 18.82))
        text3Path.addCurveToPoint(CGPoint(x: 130.05, y: 19.46), controlPoint1: CGPoint(x: 132.27, y: 19.24), controlPoint2: CGPoint(x: 131.13, y: 19.46))
        text3Path.addCurveToPoint(CGPoint(x: 126.33, y: 17.85), controlPoint1: CGPoint(x: 128.48, y: 19.46), controlPoint2: CGPoint(x: 127.24, y: 18.92))
        text3Path.addCurveToPoint(CGPoint(x: 124.97, y: 13.46), controlPoint1: CGPoint(x: 125.43, y: 16.78), controlPoint2: CGPoint(x: 124.97, y: 15.31))
        text3Path.addCurveToPoint(CGPoint(x: 126.22, y: 9.23), controlPoint1: CGPoint(x: 124.97, y: 11.71), controlPoint2: CGPoint(x: 125.39, y: 10.3))
        text3Path.addCurveToPoint(CGPoint(x: 129.51, y: 7.63), controlPoint1: CGPoint(x: 127.05, y: 8.16), controlPoint2: CGPoint(x: 128.15, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 132.53, y: 9.19), controlPoint1: CGPoint(x: 130.89, y: 7.63), controlPoint2: CGPoint(x: 131.89, y: 8.15))
        text3Path.addCurveToPoint(CGPoint(x: 133.48, y: 14.15), controlPoint1: CGPoint(x: 133.16, y: 10.24), controlPoint2: CGPoint(x: 133.48, y: 11.89))
        text3Path.addLineToPoint(CGPoint(x: 127.64, y: 14.15))
        text3Path.addCurveToPoint(CGPoint(x: 130.6, y: 17.38), controlPoint1: CGPoint(x: 127.82, y: 16.31), controlPoint2: CGPoint(x: 128.8, y: 17.38))
        text3Path.addCurveToPoint(CGPoint(x: 133.48, y: 16.67), controlPoint1: CGPoint(x: 131.45, y: 17.38), controlPoint2: CGPoint(x: 132.41, y: 17.15))
        text3Path.addLineToPoint(CGPoint(x: 133.48, y: 18.82))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 127.61, y: 12.43))
        text3Path.addLineToPoint(CGPoint(x: 130.98, y: 12.43))
        text3Path.addCurveToPoint(CGPoint(x: 129.43, y: 9.53), controlPoint1: CGPoint(x: 130.98, y: 10.5), controlPoint2: CGPoint(x: 130.47, y: 9.53))
        text3Path.addCurveToPoint(CGPoint(x: 127.61, y: 12.43), controlPoint1: CGPoint(x: 128.38, y: 9.53), controlPoint2: CGPoint(x: 127.78, y: 10.5))
        text3Path.closePath()
        text3Path.moveToPoint(CGPoint(x: 136.1, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 136.1, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 138.63, y: 7.89))
        text3Path.addLineToPoint(CGPoint(x: 138.63, y: 10.02))
        text3Path.addCurveToPoint(CGPoint(x: 141.63, y: 7.63), controlPoint1: CGPoint(x: 139.29, y: 8.42), controlPoint2: CGPoint(x: 140.29, y: 7.63))
        text3Path.addCurveToPoint(CGPoint(x: 142.1, y: 7.69), controlPoint1: CGPoint(x: 141.79, y: 7.63), controlPoint2: CGPoint(x: 141.95, y: 7.65))
        text3Path.addLineToPoint(CGPoint(x: 142.1, y: 10.41))
        text3Path.addCurveToPoint(CGPoint(x: 141.1, y: 10.17), controlPoint1: CGPoint(x: 141.74, y: 10.25), controlPoint2: CGPoint(x: 141.41, y: 10.17))
        text3Path.addCurveToPoint(CGPoint(x: 138.63, y: 12.02), controlPoint1: CGPoint(x: 140.09, y: 10.17), controlPoint2: CGPoint(x: 139.27, y: 10.79))
        text3Path.addLineToPoint(CGPoint(x: 138.63, y: 19.2))
        text3Path.addLineToPoint(CGPoint(x: 136.1, y: 19.2))
        text3Path.closePath()
        fUIBBlue.setFill()
        text3Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0.82, y: 1.28, width: 23, height: 23), cornerRadius: 5)
        fUIBBlue.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.moveToPoint(CGPoint(x: 7.06, y: 19.24))
        textPath.addLineToPoint(CGPoint(x: 7.06, y: 5.98))
        textPath.addLineToPoint(CGPoint(x: 13.02, y: 5.98))
        textPath.addCurveToPoint(CGPoint(x: 17.95, y: 7.62), controlPoint1: CGPoint(x: 15.17, y: 5.98), controlPoint2: CGPoint(x: 16.81, y: 6.53))
        textPath.addCurveToPoint(CGPoint(x: 19.67, y: 12.33), controlPoint1: CGPoint(x: 19.1, y: 8.71), controlPoint2: CGPoint(x: 19.67, y: 10.28))
        textPath.addCurveToPoint(CGPoint(x: 17.85, y: 17.43), controlPoint1: CGPoint(x: 19.67, y: 14.52), controlPoint2: CGPoint(x: 19.06, y: 16.22))
        textPath.addCurveToPoint(CGPoint(x: 12.77, y: 19.24), controlPoint1: CGPoint(x: 16.64, y: 18.64), controlPoint2: CGPoint(x: 14.95, y: 19.24))
        textPath.addLineToPoint(CGPoint(x: 7.06, y: 19.24))
        textPath.closePath()
        textPath.moveToPoint(CGPoint(x: 9.94, y: 17.36))
        textPath.addLineToPoint(CGPoint(x: 12.1, y: 17.36))
        textPath.addCurveToPoint(CGPoint(x: 15.49, y: 16.15), controlPoint1: CGPoint(x: 13.61, y: 17.36), controlPoint2: CGPoint(x: 14.74, y: 16.96))
        textPath.addCurveToPoint(CGPoint(x: 16.61, y: 12.5), controlPoint1: CGPoint(x: 16.23, y: 15.35), controlPoint2: CGPoint(x: 16.61, y: 14.13))
        textPath.addCurveToPoint(CGPoint(x: 15.71, y: 9.33), controlPoint1: CGPoint(x: 16.61, y: 11.23), controlPoint2: CGPoint(x: 16.31, y: 10.18))
        textPath.addCurveToPoint(CGPoint(x: 14.22, y: 8.13), controlPoint1: CGPoint(x: 15.3, y: 8.75), controlPoint2: CGPoint(x: 14.8, y: 8.35))
        textPath.addCurveToPoint(CGPoint(x: 11.68, y: 7.8), controlPoint1: CGPoint(x: 13.64, y: 7.91), controlPoint2: CGPoint(x: 12.79, y: 7.8))
        textPath.addLineToPoint(CGPoint(x: 9.94, y: 7.8))
        textPath.addLineToPoint(CGPoint(x: 9.94, y: 17.36))
        textPath.closePath()
        fUIWhite.setFill()
        textPath.fill()
        fUIWhite.setStroke()
        textPath.lineWidth = 0
        textPath.stroke()
    }

    //// Generated Images

    public class var imageOfRefresh: UIImage {
        if Cache.imageOfRefresh != nil {
            return Cache.imageOfRefresh!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawRefresh()

        Cache.imageOfRefresh = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRefresh!
    }

    public class var imageOfPicture: UIImage {
        if Cache.imageOfPicture != nil {
            return Cache.imageOfPicture!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawPicture()

        Cache.imageOfPicture = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPicture!
    }

    public class var imageOfFilter: UIImage {
        if Cache.imageOfFilter != nil {
            return Cache.imageOfFilter!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            DrudgeStyleKit.drawFilter()

        Cache.imageOfFilter = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfFilter!
    }

    public class var imageOfNoFilter: UIImage {
        if Cache.imageOfNoFilter != nil {
            return Cache.imageOfNoFilter!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            DrudgeStyleKit.drawNoFilter()

        Cache.imageOfNoFilter = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNoFilter!
    }

    public class var imageOfHeadline_icon: UIImage {
        if Cache.imageOfHeadline_icon != nil {
            return Cache.imageOfHeadline_icon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            DrudgeStyleKit.drawHeadline_icon()

        Cache.imageOfHeadline_icon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfHeadline_icon!
    }

    public class var imageOfTop_story: UIImage {
        if Cache.imageOfTop_story != nil {
            return Cache.imageOfTop_story!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            DrudgeStyleKit.drawTop_story()

        Cache.imageOfTop_story = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTop_story!
    }

    public class var imageOfColumn: UIImage {
        if Cache.imageOfColumn != nil {
            return Cache.imageOfColumn!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            DrudgeStyleKit.drawColumn()

        Cache.imageOfColumn = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfColumn!
    }

    public class var imageOfDLogo: UIImage {
        if Cache.imageOfDLogo != nil {
            return Cache.imageOfDLogo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 512, height: 512), false, 0)
            DrudgeStyleKit.drawDLogo()

        Cache.imageOfDLogo = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfDLogo!
    }

    public class var imageOfDNavLogo: UIImage {
        if Cache.imageOfDNavLogo != nil {
            return Cache.imageOfDNavLogo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 161, height: 25), false, 0)
            DrudgeStyleKit.drawDNavLogo()

        Cache.imageOfDNavLogo = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfDNavLogo!
    }

    //// Customization Infrastructure

    @IBOutlet var refreshTargets: [AnyObject]! {
        get { return Cache.refreshTargets }
        set {
            Cache.refreshTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfRefresh)
            }
        }
    }

    @IBOutlet var pictureTargets: [AnyObject]! {
        get { return Cache.pictureTargets }
        set {
            Cache.pictureTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfPicture)
            }
        }
    }

    @IBOutlet var filterTargets: [AnyObject]! {
        get { return Cache.filterTargets }
        set {
            Cache.filterTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfFilter)
            }
        }
    }

    @IBOutlet var noFilterTargets: [AnyObject]! {
        get { return Cache.noFilterTargets }
        set {
            Cache.noFilterTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfNoFilter)
            }
        }
    }

    @IBOutlet var headline_iconTargets: [AnyObject]! {
        get { return Cache.headline_iconTargets }
        set {
            Cache.headline_iconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfHeadline_icon)
            }
        }
    }

    @IBOutlet var top_storyTargets: [AnyObject]! {
        get { return Cache.top_storyTargets }
        set {
            Cache.top_storyTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfTop_story)
            }
        }
    }

    @IBOutlet var columnTargets: [AnyObject]! {
        get { return Cache.columnTargets }
        set {
            Cache.columnTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfColumn)
            }
        }
    }

    @IBOutlet var dLogoTargets: [AnyObject]! {
        get { return Cache.dLogoTargets }
        set {
            Cache.dLogoTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfDLogo)
            }
        }
    }

    @IBOutlet var dNavLogoTargets: [AnyObject]! {
        get { return Cache.dNavLogoTargets }
        set {
            Cache.dNavLogoTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfDNavLogo)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
