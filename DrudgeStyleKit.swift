//
//  DrudgeStyleKit.swift
//  Drudge
//
//  Created by Todd Isaacs on 5/29/16.
//  Copyright (c) 2016 Nerd Waller. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DrudgeStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let logoBaseColor: UIColor = UIColor(red: 0.069, green: 0.265, blue: 0.877, alpha: 1.000)
        static var imageOfLogoLaunchIcon: UIImage?
        static var logoLaunchIconTargets: [AnyObject]?
        static var imageOfLogoIcon: UIImage?
        static var logoIconTargets: [AnyObject]?
        static var imageOfRefresh: UIImage?
        static var refreshTargets: [AnyObject]?
        static var imageOfPicture: UIImage?
        static var pictureTargets: [AnyObject]?
    }

    //// Colors

    public class var logoBaseColor: UIColor { return Cache.logoBaseColor }

    //// Drawing Methods

    public class func drawLogoLaunchIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let logoBackgroundTop = DrudgeStyleKit.logoBaseColor.colorWithHighlight(0.8)
        let logoFill = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.6)
        let logoLines = DrudgeStyleKit.logoBaseColor.colorWithSaturation(0.3)
        let logoBackGroundBottom = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.5)
        let logoStroke = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.2)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [logoBackGroundBottom.CGColor, logoBackgroundTop.CGColor], [0, 1])!

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 6.5, y: 6.5, width: 186, height: 186))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPoint(x: 99.5, y: 6.5), CGPoint(x: 99.5, y: 192.5), CGGradientDrawingOptions())
        CGContextRestoreGState(context)
        logoStroke.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 119.25, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 96.18))
        bezierPath.addLineToPoint(CGPoint(x: 114.65, y: 96.18))
        bezierPath.addCurveToPoint(CGPoint(x: 143.1, y: 78.77), controlPoint1: CGPoint(x: 133.62, y: 96.18), controlPoint2: CGPoint(x: 143.1, y: 90.37))
        bezierPath.addCurveToPoint(CGPoint(x: 119.25, y: 65.95), controlPoint1: CGPoint(x: 143.1, y: 70.22), controlPoint2: CGPoint(x: 135.15, y: 65.95))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 88.72, y: 65.95))
        bezierPath.addLineToPoint(CGPoint(x: 76.74, y: 65.95))
        bezierPath.addCurveToPoint(CGPoint(x: 54.43, y: 67.83), controlPoint1: CGPoint(x: 66.81, y: 65.95), controlPoint2: CGPoint(x: 59.37, y: 66.58))
        bezierPath.addCurveToPoint(CGPoint(x: 41.68, y: 74.79), controlPoint1: CGPoint(x: 49.49, y: 69.08), controlPoint2: CGPoint(x: 45.24, y: 71.4))
        bezierPath.addCurveToPoint(CGPoint(x: 32.88, y: 97.74), controlPoint1: CGPoint(x: 35.82, y: 80.35), controlPoint2: CGPoint(x: 32.88, y: 88))
        bezierPath.addCurveToPoint(CGPoint(x: 41.82, y: 122.54), controlPoint1: CGPoint(x: 32.88, y: 108.12), controlPoint2: CGPoint(x: 35.86, y: 116.38))
        bezierPath.addCurveToPoint(CGPoint(x: 70.09, y: 131.21), controlPoint1: CGPoint(x: 47.36, y: 128.32), controlPoint2: CGPoint(x: 56.79, y: 131.21))
        bezierPath.addLineToPoint(CGPoint(x: 88.72, y: 131.21))
        bezierPath.addLineToPoint(CGPoint(x: 88.72, y: 65.95))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 150.46, y: 62.43))
        bezierPath.addCurveToPoint(CGPoint(x: 158.62, y: 77.71), controlPoint1: CGPoint(x: 155.9, y: 65.93), controlPoint2: CGPoint(x: 158.62, y: 71.03))
        bezierPath.addCurveToPoint(CGPoint(x: 137.14, y: 101.21), controlPoint1: CGPoint(x: 158.62, y: 88.75), controlPoint2: CGPoint(x: 151.46, y: 96.59))
        bezierPath.addLineToPoint(CGPoint(x: 172.63, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 154.09, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 123.85, y: 104.96))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 104.96))
        bezierPath.addLineToPoint(CGPoint(x: 109.77, y: 140))
        bezierPath.addLineToPoint(CGPoint(x: 68.98, y: 140))
        bezierPath.addCurveToPoint(CGPoint(x: 30.94, y: 128.64), controlPoint1: CGPoint(x: 52.63, y: 140), controlPoint2: CGPoint(x: 39.95, y: 136.21))
        bezierPath.addCurveToPoint(CGPoint(x: 17.44, y: 96.62), controlPoint1: CGPoint(x: 21.94, y: 121.06), controlPoint2: CGPoint(x: 17.44, y: 110.39))
        bezierPath.addCurveToPoint(CGPoint(x: 28.31, y: 69.2), controlPoint1: CGPoint(x: 17.44, y: 85.28), controlPoint2: CGPoint(x: 21.06, y: 76.14))
        bezierPath.addCurveToPoint(CGPoint(x: 44.56, y: 59.91), controlPoint1: CGPoint(x: 32.88, y: 64.83), controlPoint2: CGPoint(x: 38.3, y: 61.73))
        bezierPath.addCurveToPoint(CGPoint(x: 69.19, y: 57.16), controlPoint1: CGPoint(x: 50.82, y: 58.08), controlPoint2: CGPoint(x: 59.03, y: 57.16))
        bezierPath.addLineToPoint(CGPoint(x: 127.01, y: 57.16))
        bezierPath.addCurveToPoint(CGPoint(x: 150.46, y: 62.43), controlPoint1: CGPoint(x: 137.21, y: 57.16), controlPoint2: CGPoint(x: 145.03, y: 58.92))
        bezierPath.closePath()
        logoFill.setFill()
        bezierPath.fill()
        logoStroke.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 50, y: 76))
        bezier2Path.addLineToPoint(CGPoint(x: 80.5, y: 76.5))
        logoLines.setFill()
        bezier2Path.fill()
        logoLines.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 43, y: 83))
        bezier3Path.addLineToPoint(CGPoint(x: 80.5, y: 83.5))
        logoLines.setFill()
        bezier3Path.fill()
        logoLines.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 41, y: 90))
        bezier4Path.addLineToPoint(CGPoint(x: 80.5, y: 90.5))
        logoBackgroundTop.setFill()
        bezier4Path.fill()
        logoLines.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 39, y: 97))
        bezier5Path.addLineToPoint(CGPoint(x: 80.5, y: 97.5))
        logoBackgroundTop.setFill()
        bezier5Path.fill()
        logoLines.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 40, y: 105))
        bezier6Path.addLineToPoint(CGPoint(x: 80.5, y: 105.5))
        logoBackgroundTop.setFill()
        bezier6Path.fill()
        logoLines.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: 43, y: 111.5))
        bezier7Path.addLineToPoint(CGPoint(x: 80.5, y: 112))
        logoBackgroundTop.setFill()
        bezier7Path.fill()
        logoLines.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPoint(x: 47.5, y: 119))
        bezier8Path.addLineToPoint(CGPoint(x: 80.5, y: 119))
        logoBackgroundTop.setFill()
        bezier8Path.fill()
        logoLines.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.stroke()
    }

    public class func drawLogoIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let logoBackgroundTop = DrudgeStyleKit.logoBaseColor.colorWithHighlight(0.8)
        let logoFill = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.6)
        let logoLines = DrudgeStyleKit.logoBaseColor.colorWithSaturation(0.3)
        let logoBackGroundBottom = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.5)
        let logoStroke = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.2)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [logoBackGroundBottom.CGColor, logoBackgroundTop.CGColor], [0, 1])!

        //// Group
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 0.5, 0.5)
        CGContextScaleCTM(context, 0.75, 0.75)



        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextScaleCTM(context, 0.2, 0.2)

        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 186, height: 186))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPoint(x: 93, y: 0), CGPoint(x: 93, y: 186), CGGradientDrawingOptions())
        CGContextRestoreGState(context)
        logoStroke.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()

        CGContextRestoreGState(context)


        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 2.94, 10.66)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 101.81, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 39.01))
        bezierPath.addLineToPoint(CGPoint(x: 97.21, y: 39.01))
        bezierPath.addCurveToPoint(CGPoint(x: 125.66, y: 21.6), controlPoint1: CGPoint(x: 116.18, y: 39.01), controlPoint2: CGPoint(x: 125.66, y: 33.21))
        bezierPath.addCurveToPoint(CGPoint(x: 101.81, y: 8.79), controlPoint1: CGPoint(x: 125.66, y: 13.06), controlPoint2: CGPoint(x: 117.71, y: 8.79))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 71.29, y: 8.79))
        bezierPath.addLineToPoint(CGPoint(x: 59.3, y: 8.79))
        bezierPath.addCurveToPoint(CGPoint(x: 37, y: 10.66), controlPoint1: CGPoint(x: 49.37, y: 8.79), controlPoint2: CGPoint(x: 41.94, y: 9.41))
        bezierPath.addCurveToPoint(CGPoint(x: 24.25, y: 17.63), controlPoint1: CGPoint(x: 32.05, y: 11.91), controlPoint2: CGPoint(x: 27.8, y: 14.24))
        bezierPath.addCurveToPoint(CGPoint(x: 15.45, y: 40.58), controlPoint1: CGPoint(x: 18.38, y: 23.19), controlPoint2: CGPoint(x: 15.45, y: 30.84))
        bezierPath.addCurveToPoint(CGPoint(x: 24.39, y: 65.37), controlPoint1: CGPoint(x: 15.45, y: 50.95), controlPoint2: CGPoint(x: 18.43, y: 59.22))
        bezierPath.addCurveToPoint(CGPoint(x: 52.65, y: 74.05), controlPoint1: CGPoint(x: 29.93, y: 71.16), controlPoint2: CGPoint(x: 39.35, y: 74.05))
        bezierPath.addLineToPoint(CGPoint(x: 71.29, y: 74.05))
        bezierPath.addLineToPoint(CGPoint(x: 71.29, y: 8.79))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 133.03, y: 5.26))
        bezierPath.addCurveToPoint(CGPoint(x: 141.18, y: 20.54), controlPoint1: CGPoint(x: 138.46, y: 8.77), controlPoint2: CGPoint(x: 141.18, y: 13.86))
        bezierPath.addCurveToPoint(CGPoint(x: 119.7, y: 44.05), controlPoint1: CGPoint(x: 141.18, y: 31.59), controlPoint2: CGPoint(x: 134.02, y: 39.42))
        bezierPath.addLineToPoint(CGPoint(x: 155.19, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 136.66, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 106.41, y: 47.8))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 47.8))
        bezierPath.addLineToPoint(CGPoint(x: 92.33, y: 82.84))
        bezierPath.addLineToPoint(CGPoint(x: 51.54, y: 82.84))
        bezierPath.addCurveToPoint(CGPoint(x: 13.51, y: 71.47), controlPoint1: CGPoint(x: 35.19, y: 82.84), controlPoint2: CGPoint(x: 22.52, y: 79.05))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: 39.46), controlPoint1: CGPoint(x: 4.5, y: 63.9), controlPoint2: CGPoint(x: 0, y: 53.23))
        bezierPath.addCurveToPoint(CGPoint(x: 10.88, y: 12.03), controlPoint1: CGPoint(x: 0, y: 28.12), controlPoint2: CGPoint(x: 3.63, y: 18.97))
        bezierPath.addCurveToPoint(CGPoint(x: 27.12, y: 2.74), controlPoint1: CGPoint(x: 15.45, y: 7.67), controlPoint2: CGPoint(x: 20.86, y: 4.57))
        bezierPath.addCurveToPoint(CGPoint(x: 51.75, y: 0), controlPoint1: CGPoint(x: 33.38, y: 0.91), controlPoint2: CGPoint(x: 41.59, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 109.57, y: 0))
        bezierPath.addCurveToPoint(CGPoint(x: 133.03, y: 5.26), controlPoint1: CGPoint(x: 119.77, y: 0), controlPoint2: CGPoint(x: 127.59, y: 1.75))
        bezierPath.closePath()
        logoFill.setFill()
        bezierPath.fill()
        logoStroke.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()

        CGContextRestoreGState(context)


        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 10, 14)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 27.76, y: 0))
        logoLines.setFill()
        bezier2Path.fill()
        logoLines.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 8.5, 15.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier3Path.addLineToPoint(CGPoint(x: 35.08, y: 0))
        logoLines.setFill()
        bezier3Path.fill()
        logoLines.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 17)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier4Path.addLineToPoint(CGPoint(x: 39.5, y: 0.5))
        logoBackgroundTop.setFill()
        bezier4Path.fill()
        logoLines.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 5 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 18.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier5Path.addLineToPoint(CGPoint(x: 40, y: 0))
        logoBackgroundTop.setFill()
        bezier5Path.fill()
        logoLines.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 6 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7.5, 20.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: 0, y: -2.5))
        bezier6Path.addLineToPoint(CGPoint(x: 40, y: -2.5))
        logoBackgroundTop.setFill()
        bezier6Path.fill()
        logoLines.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 7 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 8.5, 21.5)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier7Path.addLineToPoint(CGPoint(x: 35.39, y: 0))
        logoBackgroundTop.setFill()
        bezier7Path.fill()
        logoLines.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.stroke()

        CGContextRestoreGState(context)


        //// Bezier 8 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9.5, 23)
        CGContextScaleCTM(context, 0.2, 0.2)

        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier8Path.addLineToPoint(CGPoint(x: 29.91, y: 0))
        logoBackgroundTop.setFill()
        bezier8Path.fill()
        logoLines.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.stroke()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawRefresh() {
        //// Color Declarations
        let logoStroke = DrudgeStyleKit.logoBaseColor.colorWithShadow(0.2)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.blackColor().setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.moveToPoint(CGPoint(x: 30.91, y: 15))
        ovalPath.addCurveToPoint(CGPoint(x: 45.91, y: 30), controlPoint1: CGPoint(x: 39.19, y: 15), controlPoint2: CGPoint(x: 45.91, y: 21.72))
        ovalPath.addCurveToPoint(CGPoint(x: 30.91, y: 45), controlPoint1: CGPoint(x: 45.91, y: 38.28), controlPoint2: CGPoint(x: 39.19, y: 45))
        ovalPath.addCurveToPoint(CGPoint(x: 15.91, y: 30), controlPoint1: CGPoint(x: 22.63, y: 45), controlPoint2: CGPoint(x: 15.91, y: 38.28))
        logoStroke.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 31, y: 22.05))
        bezierPath.addLineToPoint(CGPoint(x: 19.75, y: 15.49))
        bezierPath.addLineToPoint(CGPoint(x: 31, y: 8))
        bezierPath.addLineToPoint(CGPoint(x: 31, y: 21.86))
        bezierPath.lineCapStyle = .Round;

        bezierPath.lineJoinStyle = .Round;

        logoStroke.setFill()
        bezierPath.fill()
        logoStroke.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawPicture() {
        //// Color Declarations
        let logoBase = DrudgeStyleKit.logoBaseColor.colorWithAlpha(0.2)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2.19, y: 9.02, width: 56.06, height: 41.72), cornerRadius: 3)
        logoBase.setStroke()
        rectanglePath.lineWidth = 4
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.addLineToPoint(CGPoint(x: 52.25, y: 44.51))
        bezierPath.addLineToPoint(CGPoint(x: 52.31, y: 28.71))
        bezierPath.addLineToPoint(CGPoint(x: 38.94, y: 17.25))
        bezierPath.addLineToPoint(CGPoint(x: 23.06, y: 32.19))
        bezierPath.addLineToPoint(CGPoint(x: 16.6, y: 27.32))
        bezierPath.addLineToPoint(CGPoint(x: 8.58, y: 36))
        bezierPath.addLineToPoint(CGPoint(x: 8.27, y: 44.37))
        bezierPath.closePath()
        logoBase.setFill()
        bezierPath.fill()
        logoBase.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 8.52, y: 14.7, width: 7.22, height: 6.59))
        logoBase.setFill()
        ovalPath.fill()
        logoBase.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
    }

    public class func drawCanvas1() {
    }

    public class func drawUpdateButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.314, green: 0.427, blue: 0.529, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 93, height: 27), cornerRadius: 8)
        color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 20.75, y: 3, width: 67.26, height: 21)
        let textTextContent = NSString(string: "Updates")
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .Left

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect)
        textTextContent.drawInRect(CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 11, y: 20))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.addLineToPoint(CGPoint(x: 6.52, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 14.75, y: 11.48))
        bezierPath.addLineToPoint(CGPoint(x: 11, y: 5.98))
        bezierPath.lineJoinStyle = .Round;

        UIColor.whiteColor().setFill()
        bezierPath.fill()
        UIColor.whiteColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    //// Generated Images

    public class var imageOfLogoLaunchIcon: UIImage {
        if Cache.imageOfLogoLaunchIcon != nil {
            return Cache.imageOfLogoLaunchIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
            DrudgeStyleKit.drawLogoLaunchIcon()

        Cache.imageOfLogoLaunchIcon = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfLogoLaunchIcon!
    }

    public class var imageOfLogoIcon: UIImage {
        if Cache.imageOfLogoIcon != nil {
            return Cache.imageOfLogoIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 29), false, 0)
            DrudgeStyleKit.drawLogoIcon()

        Cache.imageOfLogoIcon = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfLogoIcon!
    }

    public class var imageOfRefresh: UIImage {
        if Cache.imageOfRefresh != nil {
            return Cache.imageOfRefresh!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawRefresh()

        Cache.imageOfRefresh = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfRefresh!
    }

    public class var imageOfPicture: UIImage {
        if Cache.imageOfPicture != nil {
            return Cache.imageOfPicture!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            DrudgeStyleKit.drawPicture()

        Cache.imageOfPicture = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPicture!
    }

    //// Customization Infrastructure

    @IBOutlet var logoLaunchIconTargets: [AnyObject]! {
        get { return Cache.logoLaunchIconTargets }
        set {
            Cache.logoLaunchIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfLogoLaunchIcon)
            }
        }
    }

    @IBOutlet var logoIconTargets: [AnyObject]! {
        get { return Cache.logoIconTargets }
        set {
            Cache.logoIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfLogoIcon)
            }
        }
    }

    @IBOutlet var refreshTargets: [AnyObject]! {
        get { return Cache.refreshTargets }
        set {
            Cache.refreshTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfRefresh)
            }
        }
    }

    @IBOutlet var pictureTargets: [AnyObject]! {
        get { return Cache.pictureTargets }
        set {
            Cache.pictureTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: DrudgeStyleKit.imageOfPicture)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
